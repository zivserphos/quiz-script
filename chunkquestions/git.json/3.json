[
    {
        "query": " Q51. Which version onwards did Git offer reversing a file back to what it looked like when last committed?",
        "options": [
            " 1.7\r\n",
            " 1.6\r\n",
            " 2.0\r\n",
            " 1.8\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q52. Which strategy is used by Git for merging two branches?",
        "options": [
            " LIFO\r\n",
            " recursive\r\n",
            " FIFO\r\n",
            " octopus\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q53. What does refs store?",
        "options": [
            " SHA-1 value\r\n",
            " None of these\r\n",
            " Branch name\r\n",
            " Project name\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q54. What Language is used in GIT?",
        "options": [
            " C\r\n",
            " C++\r\n",
            " C#\r\n",
            " Java\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q55. What is usually the extension of file which has the public key?",
        "options": [
            " ssh\r\n",
            " pub\r\n",
            " key\r\n",
            " pk\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q56. What is the difference between initializing a normal repo and a bare repo?",
        "options": [
            " Bare repos store their git history in a .git subfolder.\r\n",
            " Bare repos do not have the .git extension.\r\n",
            " Bare repos do not come with working or checked-out source files.\r\n",
            " Bare repos should be used for local rather than remote repos.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q57. How many individual commits can a single repository have?",
        "options": [
            " any number of commits\r\n",
            " only one commit local per repository\r\n",
            " only three commits per branch\r\n",
            " only one commit per HEAD\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q58. What types of tags does Git support?",
        "options": [
            " heavy and concise\r\n",
            " lightweight and immutable\r\n",
            " heavy and annotated\r\n",
            " lightweight and annotated\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q59. After staging a series of changes to the index, which command could you use to review them prior to a commit?",
        "options": [
            " git diff --cached\r\n",
            " git diff\r\n",
            " git diff --HEAD\r\n",
            " git status -v -v\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q60. What does the git stash drop command do?",
        "options": [
            " removes the most recent stash entry\r\n",
            " deletes the stash\r\n",
            " lists everything in the stash\r\n",
            " throws away the oldest entry\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q61. What command creates a new branch from the currently checked-out branch?",
        "options": [
            " `git -b checkout <nameOfBranch>`\r\n",
            " `git branch`\r\n",
            " `git checkout <nameOfBranch>`\r\n",
            " `git checkout -b <nameOfBranch>`\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q62. After mistakenly staging a file named myFile to the index, how would you remove it from the index to exclude it from your next commit?",
        "options": [
            " Use git reset HEAD^.\r\n",
            " Use git reset myFile.txt.\r\n",
            " Use git -rm myFile.txt.\r\n",
            " Use git reset.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q63. What happens if you run this command from your master branch?",
        "code": "bash\r\ngit checkout -b beta-test\r\n",
        "options": [
            " The beta-test branch will be checked out of the current commit.\r\n",
            " The beta-test branch will be checked out and deleted.\r\n",
            " A new branch called beta-test will be created and switched to.\r\n",
            " The beta-test branch will be merged with the master branch.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q64. How does Git internally manage branches?",
        "options": [
            " by creating a pointer to the most recent snapshot/commit for the branch.\r\n",
            " by creating a data array of branches in the same repository.\r\n",
            " by creating a data dictionary of code changes.\r\n",
            " be creating a debug log that stores repository changes.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q65. You want to perform a git reset but cannot recall all of the available options. What command would you use to see a description of them?",
        "options": [
            " git help reset\r\n",
            " git -h reset\r\n",
            " git options reset\r\n",
            " git reset help\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q66. What is a remote repository?",
        "options": [
            " a version of the repository that mirrors changes made in the local repository's master branch for open-source collaboration efforts\r\n",
            " the lead repository elected by the Git arbitrator found within local repositories of collaborating team members\r\n",
            " a read-only version of the repository stored on a backup server in case local repositories become lost or corrupted\r\n",
            " a version of the repository hosted on the internet or network that is pushed to or pulled from by collaborators\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q67. After modifying some existing files in a repository, you decide to discard the changes. What command can you use?",
        "options": [
            " git restore\r\n",
            " git undo\r\n",
            " git clean\r\n",
            " git checkout\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q68. After starting to merge a feature branch into your master branch, you encounter a merge conflict and decide you do not want to perform the merge. How can you stop the merge and restore to the pre-merge state?",
        "options": [
            " Use git restore -p.\r\n",
            " Use git merge -u.\r\n",
            " Use git merge --abort.\r\n",
            " Use git merge --undo.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q69. If you have several commits for a single feature, what is the most efficient way to restructure your commit history?",
        "options": [
            " Use git stash to consolidate the commits under a new hash.\r\n",
            " Use git squash to consolidate the commits together into a single coherent commit.\r\n",
            " Delete the task commits and recommit with a new message.\r\n",
            " Use git cherry-pick to place the commits in another branch.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q70. Which command correctly creates a lightweight tag?",
        "options": [
            " `git tag v3.8.1`\r\n",
            " `git tag --light \"v3.8.1\"`\r\n",
            " `git tag v3.8.1 â€”-annotate -m \"<tagMessage>\"`\r\n",
            " `git tag -l v3.8.1`\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q71. What is the main issue with using git rebase when working with multiple developers?",
        "options": [
            " Rebase affects only your repository and creates a diff in the master branch.\r\n",
            " Rebase creates a temporary copy of the master branch in the remote repo.\r\n",
            " Rebase moves the HEAD of the remote master branch one commit forward.\r\n",
            " Rebase deletes all commit history for the new feature branch.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q72. What Git workflow is used by teams that collaborate on a single branch and avoid creating long-lived development branches?",
        "options": [
            " Git flow\r\n",
            " Mainline flow\r\n",
            " Trunk-Based Development\r\n",
            " GitHub flow\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q73. Which option on the git log command allows you to limit output to commits made after certain data?",
        "options": [
            " `--since`\r\n",
            " `--sinceWhen`\r\n",
            " `-<n>`\r\n",
            " `--afterDate`\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q74. How would you delete unreachable objects older than a specified time from your project database?",
        "options": [
            " `git cache --obsolete <time>`\r\n",
            " `git branch --rebase <time>`\r\n",
            " `git delete --inert <time>`\r\n",
            " `git prune --expire <time>`\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q75. What conflicts can occur when forcing a push after rebasing?",
        "options": [
            " The remote master branch could have existing changes overwritten.\r\n",
            " The origin URL will be reset to its default value.\r\n",
            " The current HEAD will be deleted and can't be reinstated.\r\n",
            " Nothing, it's common practice to force a push after rebasing.\r\n\r\n"
        ],
        "correctAns": 1
    }
]