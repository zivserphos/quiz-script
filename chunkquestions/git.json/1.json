[
    {
        "query": " Q1. How can you check your current git version?",
        "options": [
            " git --v\r\n",
            " git --version\r\n",
            " git --option\r\n",
            " git --current\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q2. What command lets you create a connection between a local and remote repository?",
        "options": [
            " git remote add new\r\n",
            " git remote add origin\r\n",
            " git remote new origin\r\n",
            " git remote origin\r\n\r\nThe command is git remote add. The new added connection can be named origin or new. The only constraints, although it is not documented AFAIK, is that the connection name needs to be acceptable to git-check-ref-format, and it cannot be repeated.\r\nIf the LinkedIn assessment asks this and you can choose just one option, then leave feedback.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q3. Describe what the following git commands do to the commit history.",
        "code": "bash\r\ngit reset --hard HEAD~5\r\ngit merge --squash HEAD@{1}\r\n",
        "options": [
            " Reset the HEAD to the 5th commit in the repo, then merges to the master branch\r\n",
            " Reset the commit branch back before the last 5 commits, then squashes them into a single commit\r\n",
            " Delete the last 5 commits\r\n",
            " Merges the last 5 commits into a new branch\r\n\r\n**Explanation:**\r\n\r\n- `git reset --hard HEAD~5` resets the current branch to the commit just before the last 5 (see `man gitrevisions` for details about this notation and other cool alternatives like `HEAD@{2 days ago}`). As it is a hard reset, it will also overwrite every change in the working tree as well. See `man git-reset`.\r\n- `git merge --squash HEAD@{1}` HEAD@{1} is where the branch was just before the previous command (again, see `man gitrevisions`). This command sets the state of the index to be as it would just after a merge from that commit. This whole operation could be a way to take 5 commits from a branch in which you started a new feature and squash them to a single commit, a meaningful one.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q4. Your current project has several branches; master, beta, and push-notifications. You've just finished the notification feature in the push-notification branch, and you want to commit it to beta branch. How can you accomplish this?",
        "options": [
            " Checkout the push-notifications branch and run git merge beta\r\n",
            " Checkout the master branch and run git merge beta -> push-notification\r\n",
            " Delete the push-notification branch and it will be committed to the master branch automatically\r\n",
            " Checkout the beta branch and run git merge push-notification\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q5. Which of the following is true you when you use the following command?",
        "options": [
            " All new and updated files are staged\r\n",
            " Files are staged in alphabetical order.\r\n",
            " All new files are staged\r\n",
            " Only updated files are staged\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q6. What will the following command print to the Terminal?",
        "options": [
            " A list of remote repositories and their URLs\r\n",
            " The current git version you're running\r\n",
            " An inline editor for modifying remote repositories\r\n",
            " The last 5 git versions you've installed\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q7. Looking at the following commands, describe what is happening.",
        "code": "bash\r\ngit checkout feature-user-location\r\ngit cherry-pick kj2342134sdf090093f0sdgasdf99sdfo992mmmf9921231\r\n",
        "options": [
            " The commit is being tagged for release on the feature-user-location branch\r\n",
            " A commit is being copied from its original branch over to the feature-user-location branch\r\n",
            " The commit is being cherry picked as the new HEAD of the commit history\r\n",
            " A commit is being copied from the feature-user-location branch to the master branch\r\n",
            " The branch is switched to the feature-user-location branch, and the specified commit is applied to the branch.\r\n\r\n**Explanation:** Commits aren't copied when cherry picking, they are cherry picked. The changes introduced by the commit are applied and a new commit is then created. This allow us to get specific changes as if they were patches (in the GIT's book, this is actually called [Patching](https://git-scm.com/book/en/v2/Appendix-C:-Git-Commands-Patching \"See this in the GIT's book\")). As a new commit is created upon feature-user-location, HEAD also changes to match it. You can see this in `cat .git/HEAD` and `cat .git/refs/heads/feature-user-location` for this case. See `man git-cherry-pick` for details.\r\n\r\n**NOTE**: There are two versions of this question so far. The task is always \"describe what is happening\", the commands are always a `checkout` and a `cherry-pick`, and the correct answer is always the same.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q8. What does the following command do to the git repository?",
        "options": [
            " It deletes all previous commits and reset the repository history back to its initial state.\r\n",
            " It resets the working branch to the first commit.\r\n",
            " It keeps the HEAD at the current commit, but clears all previous commits.\r\n",
            " It sets HEAD to the previous commit and leaves changes from the undone commit in the stage/index.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q9. You find a bug in your project, but can't locate where it was introduced in the commit history. How would you diagnose this problem?",
        "options": [
            " Manually backtrack through your commit history.\r\n",
            " Use git search -diff to compare all commits in your repository history.\r\n",
            " Run a git rebase to find the buggy commit.\r\n",
            " Use git bisect to compare the buggy commit to an early commit that works as expected.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q10. Why would the following command be used?",
        "options": [
            " To run a comparative search of the last 10 commits for differences\r\n",
            " To list the last 10 commits and modify them with either the squash or fixup command\r\n",
            " To delete the last 10 commits and reset the HEAD\r\n",
            " In order to locally cache the last 10 commits\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q11. Why would you use a pre-receive hook in your remote repository?",
        "options": [
            " You wouldn't, you would use it in the local repository\r\n",
            " To execute a script when a remote receives a push that is triggered before any refs are updated\r\n",
            " To fire a script after updates are made to the remote repository\r\n",
            " To debug all commit tags and release versions\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q12. What option can you use to apply git configurations across your entire git environment?",
        "options": [
            " `--all`\r\n",
            " `--master`\r\n",
            " `--global`\r\n",
            " `--update`\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q13. How could you squash multiple commits together without using git merge --squash?",
        "options": [
            " Caching\r\n",
            " You can't. git merge --squash is the only git command for that operation.\r\n",
            " Rebasing\r\n",
            " Reflogging\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q14. If you cloned an existing git repository, what would happen?",
        "options": [
            " A new copy would overwrite the central repository\r\n",
            " A copy of the repository would be created on your local machine\r\n",
            " Nothing, cloning is not a supported git function\r\n",
            " A copy of the repository would be created on the hosting platform\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q15. How can you display a list of files added or modified in a specific commit?",
        "options": [
            " Find the commit in the remote repository, as that's the only place that kind of information is stored.\r\n",
            " Use the `diff-tree` command with the commit hash.\r\n",
            " Run `git commit --info` with the commit hash.\r\n",
            " Access the commit stash data with `git stash`.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q16. What files is this .gitignore programmed to leave out?",
        "code": "shell\r\n#.swift\r\nbuild/\r\n\r\n*.txt\r\n*.metadata\r\n",
        "options": [
            " All files with a .swift, .txt, or metadata file extension, as well as the entire build directory\r\n",
            " Only the build directory\r\n",
            " All files in the build directory, as well as files ending with .txt or .metadata\r\n",
            " Only files with .swift and .txt extensions.\r\n\r\nA line starting with `#` serves as a comment. Hence `# .swift` does not do anything. See `man gitignore`.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q17. After you make changes to a local repository, you run the following command. What will this do?",
        "options": [
            " Nothing, you can't use multiple options in the same command\r\n",
            " Adds all new files to the staging area\r\n",
            " Commits all new files with a message\r\n",
            " Adds all modified files to the staging area, then commits them with a message\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q18. After checking your git status you get the following output, which shows the file beta-notes.js in the commit but also unstaged. How can this situation occur?",
        "code": "shell\r\nChange to be committed:\r\n\r\n(use \"git reset HEAD <file>...\" to unstage)\r\nmodified: beta-notes.js\r\nChanges not staged for commit:\r\n(use \"git add <file>...\" to update what will be committed)\r\n(use \"git checkout --<file>...\" to discard changes in working directory)\r\n\r\nmodified: beta-notes.js\r\n",
        "options": [
            " There were two copies of beta-notes.js but one was deleted\r\n",
            " beta-notes.js was staged, then modified afterwards, creating two different versions of the file\r\n",
            " Two copies of beta-notes.js were created, but only one is being tracked\r\n",
            " There are two tracked copies of beta-notes.js, but one was removed from the commit\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q19. Where are files stored before they are committed to the local repository?",
        "options": [
            " Saved files\r\n",
            " git documents\r\n",
            " Staging area\r\n",
            " git cache\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q20. What commands would you use to force an overwrite of your local files with the master branch?",
        "code": null,
        "options": [
            " ⠀\r\n  ```bash\r\n  git pull --all\r\n  git reset --hard origin/master\r\n  ```\r\n",
            " ⠀\r\n  ```bash\r\n  git pull -u origin master\r\n  git reset --hard master\r\n  ```\r\n",
            " ⠀\r\n  ```bash\r\n  git pull origin master\r\n  git reset --hard origin/myCurrentBranch\r\n  ```\r\n",
            " ⠀\r\n\r\n  ```bash\r\n  git fetch --all\r\n  git reset --hard origin/master\r\n  ```\r\n\r\n- The command `pull` is `fetch` followed by either `merge` or `rebase` (in this case, `merge`). We don't want to merge. Merge would be an action to our **repository**. We just want to overwrite our **local files**.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q21. Which statement is true when you use the git add -A command?",
        "options": [
            " Only new files in the working directory are staged to the index.\r\n",
            " All new and updated files from the working directory are staged to the index.\r\n",
            " All files in the working directory are staged to the index in alphabetical order.\r\n",
            " Only updated files in the working directory are staged to the index.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q22. You find that your project has a tag and branch both named push-notifications, which causes confusion when trying to print out given reference. How can you specify which branch you want to look at?",
        "options": [
            " use git show refs/push-notifications\r\n",
            " use git show push-notifications\r\n",
            " use git show heads/refs/push-notifications\r\n",
            " use git show refs/heads/push-notifications\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q23. Your team lead needs a list of all commits that will be moved before you perform a rebase. Which command can you use to access that information?",
        "options": [
            " git rebase -log\r\n",
            " git rebase -i\r\n",
            " git rebase -verbose\r\n",
            " git rebase -all\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q24. What is the operation doing given the Git commands below?",
        "code": "\r\ngit bisect start\r\ngit bisect bad 5d41402abc4b2a76b9719d911017c592\r\ngit bisect good 69faab6268350295550de7d587bc323d\r\n",
        "options": [
            " It runs a merge of a good commit that is discovered using a known bad commit and known good commit\r\n",
            " It marks a commit for deletion using a known bad commit and known good commit to determine which commit introduced a bug\r\n",
            " It defines a bad commit and resets the HEAD using a known bad commit and known good commit\r\n",
            " It performs a binary search using a known bad commit and known good commit to determine which commit introduced a bug\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q25. In a situation where you have several commits for a single task, what is the most efficient way to restructure your commit history?",
        "options": [
            " Cherry pick the related commits to another branch.\r\n",
            " Delete the task commits and recommit with a new message.\r\n",
            " Squash the related commits together into a single coherent commit.\r\n",
            " Stash the related commits under a new hash.\r\n\r\n"
        ],
        "correctAns": 3
    }
]