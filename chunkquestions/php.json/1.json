[{"query":"","options":[" 1\r\n"," -1\r\n"," a parser error\r\n"," 0\r\n\r\n***Both sides of the \"spaceship\" are equal, so the answer is 0. PHP will convert '76 trombones' to 76 in this context, as the string starts with '76'. Try it!***\r\n\r\n"],"correctAns":4},{"query":"","options":[" `$encrypted = shal($password);`\r\n"," `$encrypted = crypt($password, \\$salt);`\r\n"," `$encrypted = md5($password);`\r\n"," `$encrypted = password_hash($password, PASSWORD_DEFAULT);`\r\n\r\n"],"correctAns":4},{"query":"","code":"php\r\n$email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\r\nif ($email === false) {\r\n    $emailErr = \"Please re-enter valid email\";\r\n}\r\n","options":[" It makes sure the email address is a good and functioning address\r\n"," It makes an email safe to input into a database\r\n"," It assigns an email to a variable and then removes all illegal characters from the \\$email variable\r\n"," It verifies that an email address is well formed.\r\n\r\n"],"correctAns":4},{"query":"","code":"\r\n1 <?php\r\n2       $count = 0;\r\n3       $_xval = 5;\r\n4       $_yval = 1.0;\r\n5       $some_string = \"Hello there!\";\r\n6       $some_string = \"How are you?\";\r\n7       $will i work = 6;\r\n8       $3blindmice = 3;\r\n9 ?>\r\n","options":[" Line 6 will cause an error because you can't reassign a new value to a variable that has already been set.\r\n"," Line 7 and 8 will cause an error. Line 7 has whitespace in $will i work and should be $will_i_work. Line 8 cannot start with a number befcause it is a variable.\r\n"," Line 5 will cause an error because some_string should be someString.\r\n"," Line 3 and 4 will cause an error because a variable cannot start with an underscore(\\_).\r\n\r\n"],"correctAns":2},{"query":"","options":[" ||\r\n"," &\r\n"," <=>\r\n"," &&\r\n\r\n"],"correctAns":4},{"query":"","options":[" &\r\n"," %\r\n"," \\_\r\n"," $\r\n\r\n"],"correctAns":4},{"query":"","options":[" GET is used with the HTTP protocol. POST is used with HTTPS.\r\n"," GET displays the submitted data as part of the URL. During POST, this information is not shown, as it's encoded in the request body.\r\n"," GET is intended for changing the server state and it carries more data than POST.\r\n"," GET is more secure than POST and should be used for sensitive information.\r\n\r\n"],"correctAns":2},{"query":"","options":[" greater-than; right\r\n"," spaceship; left\r\n"," equality; right\r\n"," comparison; left\r\n\r\n"],"correctAns":2},{"query":"","options":[" try, throw, catch, callable\r\n"," try, yield, catch, finally\r\n"," yield, throw, catch, finally\r\n"," try, throw, catch, finally\r\n\r\n"],"correctAns":4},{"query":"","options":[" 0\r\n"," NULL\r\n"," ''\r\n"," -1\r\n\r\n"],"correctAns":4},{"query":"","code":"php\r\n1 $string_name = \"testcookie\";\r\n2 $string_value = \"This is a test cookie\";\r\n3 $expiry_info = info()+259200;\r\n4 $string_domain = \"localhost.localdomain\";\r\n","options":[" The `$_REQUEST` is missing.\r\n"," The `$_COOKIES` array is missing.\r\n"," The cookie session is missing.\r\n"," The call to `setcookie()` is missing.\r\n\r\n"],"correctAns":4},{"query":"","options":[" 44\r\n"," 138\r\n"," 126\r\n"," 100\r\n\r\n"],"correctAns":4},{"query":"","options":[" It makes the dot metacharacter match anything, including newline characters.\r\n"," It makes the pattern match uppercase letters.\r\n"," Both the pattern and subject string are treated as UTF-8.\r\n"," It inverts the greediness of the quantifiers in the pattern so they are not greedy by default.\r\n\r\n"],"correctAns":3},{"query":"","options":[" `$dog = new Pet;`\r\n"," all of these answers\r\n"," `$horse = (new Pet);`\r\n"," `$cat = new Pet();`\r\n\r\n"],"correctAns":2},{"query":"","code":"php\r\n1 if (!$_SESSION['myusername'])\r\n2 {\r\n3   header('locaton: /login.php');\r\n4   exit;\r\n5 }\r\n","options":[" This script times out the session for myusername.\r\n"," Cookies are starting to be stored as a result of this script.\r\n"," This script validates the username and password.\r\n"," This script is on a page that requires the user to be logged in. It checks to see if the user has a valid session.\r\n\r\n"],"correctAns":4},{"query":"","options":[" all of these answers\r\n"," #This is a comment\r\n"," `/* This is a comment */`\r\n"," // This is a comment\r\n\r\n"],"correctAns":1},{"query":"","options":[" for\r\n"," do-while\r\n"," while\r\n"," foreach\r\n\r\n"],"correctAns":3},{"query":"","options":[" You would use it to stop a user from clicking the back button if they decide not to view as a result of a click.\r\n"," You would use this function if you have some important processing to do and you do not want to stop it, even if your users click Cancel.\r\n"," You would use this function if you wanted to abort the script for all logged-in users, not just the one who disconnected.\r\n"," You would use this function if you want a PHP script to run forever.\r\n\r\n"],"correctAns":2},{"query":"","code":null,"options":["\r\n  ```php\r\n  1 <?php\r\n  2 echo array_reduce([1, 2, 5, 10, 11], function ($item, $carry) {\r\n  3     $carry = $carry + $item;\r\n  4 });\r\n  5?>\r\n  ```\r\n","\r\n  ```php\r\n  1 <?php\r\n  2 echo array_reduce([1, 2, 5, 10, 11], function ($carry, $item) {\r\n  3     return $carry = $item + $item;\r\n  4 });\r\n  5?>\r\n  ```\r\n","\r\n  ```php\r\n  1 <?php\r\n  2 array_reduce([11 2, 5, 10, 11], function ($item, $carry) {\r\n  3     echo $carry + $item;\r\n  4 });\r\n  5?>\r\n  ```\r\n","\r\n  ```php\r\n  1 <?php\r\n  2 echo array_reduce([1, 2, 5, 10, 11], function ($carry, $item) {\r\n  3     return $carry += $item;\r\n  4 });\r\n  5?>\r\n  ```\r\n\r\n"],"correctAns":4},{"query":"","code":null,"options":["\r\n  ```php\r\n  1 class MyClass {\r\n  2 public function _construct()\r\n  3 {\r\n  4 echo 'Winter is almost over!'.\"\\n\";\r\n  5 }\r\n  6 }\r\n  7 $userclass = new MyClass;\r\n  ```\r\n","\r\n  ```php\r\n  1 class MyClass {\r\n  2 public function _construct()\r\n  3 {\r\n  4 echo 'Winter is almost over!..\"\\n\";\r\n  5 }\r\n  6 }\r\n  7 $userclass = new MyClass;\r\n  ```\r\n","\r\n  ```php\r\n  1 class MyClass {\r\n  2 public function _construct()\r\n  3 {\r\n  4 echo 'Winter is almost over!..\"\\n\";\r\n  5 }\r\n  6 }\r\n  7 $userclass = new MyClass;\r\n  ```\r\n","\r\n  ```php\r\n  1 class MyClass {\r\n  2 public function _construct()\r\n  3 {\r\n  4 echo 'Winter is almost over!'.\"n\";\r\n  5 }\r\n  6 }\r\n  7 $userclass = MyClass;\r\n  ```\r\n\r\n"],"correctAns":1},{"query":"","options":[" Make sure you have imported the file containing the function.\r\n"," Make sure you have spelled the function name correctly.\r\n"," all of these answers\r\n"," Make sure the function declaration is at an earlier point in the code than the function call.\r\n\r\n"],"correctAns":3},{"query":"","options":[" `/* Space: the final frontier */`\r\n"," `*/ Space: the final frontier /*`\r\n"," `#Space: the final frontier`\r\n"," `// Space: the final frontier`\r\n\r\n"],"correctAns":2},{"query":"","options":[" The browser would display nothing due to a syntax error.\r\n"," The browser would display an error, since there are no parentheses around the string.\r\n"," The browser would display `How much are the bananas?`\r\n"," The browser would display an error, since there is no semicolon at the end of the echo command.\r\n\r\n"],"correctAns":3},{"query":"","options":[" /\r\n"," %\r\n"," //\r\n"," DIV\r\n\r\n"],"correctAns":2},{"query":"","code":"php\r\nfunction process(...$vals) {\r\n        // do some processing\r\n }\r\n","options":[" It makes the function variadic, allowing it to accept as an argument an array containing an arbitrary number of values.\r\n"," It makes the function variadic, allowing it to accept an arbitrary number of arguments that are converted into an array inside the function.\r\n"," It temporarily disables the function while debugging other parts of the script.\r\n"," It's a placeholder like a TO DO reminder that automatically triggers a notice when you run a script before completing the function definition.\r\n\r\n"],"correctAns":2}]