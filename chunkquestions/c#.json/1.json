[{"query":" Q1. In which of these situations are interfaces better than abstract classes?","options":[" When you need to define an object type's characteristics, use an interface. When you need to define an object type's capabilities, use an abstract class.\r\n"," Interfaces are a legacy of older versions of C#, and are interchangeable with the newer abstract class feature.\r\n"," When you need a list of capabilities and data that are classes-agnostic, use an interface. When you need a certain object type to share characteristics, use an abstract class.\r\n"," You should use both an interface and an abstract class when defining any complex object.\r\n\r\n"],"correctAns":3},{"query":" Q2. Which statement is true of delegates?","options":[" Delegates are not supported in the current version of C#\r\n"," They cannot be used as callbacks.\r\n"," Only variables can be passed to delegates as parameters.\r\n"," They can be chained together.\r\n\r\n**Reference** [Official documentation: Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/#delegates-overview)\r\n\r\n"],"correctAns":4},{"query":" Q3. Which choice best defines C","options":[" reactive\r\n"," inherited callback\r\n"," task-based\r\n"," callback-based\r\n\r\n**Reference** [Official documentation: Task asynchronous programming model](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model)\r\n\r\n"],"correctAns":3},{"query":" Q4. How would you determine if a class has a particular attribute?","code":null,"options":[" .\r\n\r\n```cs\r\nvar type = typeof(SomeType);\r\nvar attribute = type.GetCustomAttribute<SomeAttribute>();\r\n```\r\n\r\n"," .\r\n\r\n```cs\r\nvar typeof(MyPresentationModel).Should().BeDecoratedWith<SomeAttribute>();\r\n```\r\n\r\n"," .\r\n\r\n```cs\r\nAttribute.GetCustomAttribute, typeof(SubControllerActionToViewDataAttribute)\r\n```\r\n\r\n"," .\r\n\r\n```cs\r\nAttribute.GetCustomAttribute(typeof(ExampleController), typeof(SubControllerActionToViewDataAttribute))\r\n```\r\n\r\n**Reference** [Official documentation: Attribute Class](https://docs.microsoft.com/en-us/dotnet/api/system.attribute?view=net-5.0)\r\n\r\n**Reference** [Official documentation: Attribute.GetCustomAttribute Method](https://docs.microsoft.com/en-us/dotnet/api/system.attribute.getcustomattribute?view=net-5.0)\r\n\r\n"],"correctAns":4},{"query":" Q5. What is the difference between the ref and out keywords?","options":[" Variables passed to out specify that the parameter is an output parameter, while ref specifies that a variable may be passed to a function without being initialized.\r\n"," Variables passed to ref can be passed to a function without being initialized, while out specifies that the value is a reference value that can be changed inside the calling method.\r\n"," Variables passed to out can be passed to a function without being initialized, while ref specifies that the value is a reference value that can be changed inside the calling method.\r\n"," Variables passed to ref specify that the parameter is an output parameter, while out specifies that a variable may be passed to a function without being initialized.\r\n\r\n**Reference** [Official documentation: ref](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref)\r\n\r\n**Reference** [Official documentation: out parameter modifier](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier)\r\n\r\n"],"correctAns":3},{"query":" Q6. How could you retrieve information about a class, as well as create an instance at runtime?","options":[" reflection\r\n"," serialization\r\n"," abstraction\r\n"," dependency injection\r\n\r\n**Reference** [Official documentation: Reflection ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection)\r\n\r\n"],"correctAns":1},{"query":" Q7. What is this code an example of?","code":"cs\r\n    private static object objA;\r\n    private static object objB;\r\n\r\n    private static void performTaskA()\r\n    {\r\n        lock (objB)\r\n        {\r\n            Thread.Sleep(1000);\r\n            lock (objA) { }\r\n        }\r\n    }\r\n\r\n    private static void PerformTaskB()\r\n    {\r\n        lock (objA)\r\n        {\r\n            lock (objB) { }\r\n        }\r\n    }\r\n","options":[" a private class that uses multithreading\r\n"," multithread coding\r\n"," thread mismanagement\r\n"," a potential deadlock\r\n\r\n**Reference** [Official documentation: Deadlocks and race conditions](https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions)\r\n\r\n"],"correctAns":4},{"query":" Q8. What is the difference between an anonymous type and a regular data type?","options":[" Anonymous types don't have type names\r\n"," Anonymous types can only be static\r\n"," Anonymous types can be used only in struts\r\n"," Anonymous types don't work with LINQ.\r\n\r\n**Reference** [Official documentation: Anonymous Types](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types)\r\n\r\n"],"correctAns":1},{"query":" Q9. When would you use a Dictionary rather that an Array type in your application?","options":[" when you need a jagged collection structure\r\n"," when you need to store values of the same type\r\n"," when you need to store key-value pairs rather than single values\r\n"," when you need an ordered, searchable list\r\n\r\n**Reference** [Official documentation: Dictionary<TKey,TValue> Class](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=net-5.0)\r\n\r\n"],"correctAns":3},{"query":" Q10. What is the difference between a.Equals(b) and a == b?","options":[" The .Equals method compares reference identities while the == compares contents.\r\n"," The .Equals method compares primitive values while == compares all values.\r\n"," The .Equals method compares contents while == compares references reference identity.\r\n"," The .Equals method compares reference type while == compares primitive value types.\r\n\r\n"],"correctAns":3},{"query":" Q11. Which choice best describes a deadlock situation?","options":[" when you try to instantiate two objects at the same time in the same class or struct\r\n"," when you are trying to execute an action after a user event is registered\r\n"," when simultaneous instructions are waiting on each other to finish before executing\r\n"," when you try to execute a series of events simultaneously on multiple threads\r\n\r\n**Reference** [Official documentation: Deadlocks and race conditions](https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions)\r\n\r\n"],"correctAns":3},{"query":" Q12. How does the async keyword work?","options":[" It allows access to asynchronous methods in the C# API\r\n"," It allows thread pooling and synchronous processes in static classes.\r\n"," It allows the await keyword to be used in a method\r\n"," It allows access to synchronous methods in the C# API\r\n\r\n**Reference** [Official documentation: async](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async)\r\n\r\n"],"correctAns":3},{"query":" Q13. What is an object in C","options":[" a class or struct, including its variables and functions\r\n"," a primitive data type that can be created only at compile time\r\n"," a value type that can be used only with an abstract class\r\n"," an instance of a class or struct that includes fields, properties, and/or methods\r\n\r\n**Reference** [Official documentation: Objects](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/objects)\r\n\r\n"],"correctAns":4},{"query":" Q14. Which code snippet declares an anonymous type named userData?","options":[" `var<<!---->T> userData = new <<!---->T> { name = \"John\", age = 32 };`\r\n"," `var userData = new { name = \"John\", age = 32 };`\r\n"," `AType userData = new AType { name = \"John\", age = 32 };`\r\n"," `Anonymous<T> userData = new Anonymous<T> { name = \"John\", age = 32 };`\r\n\r\n**Reference** [Official documentation: Anonymous Types](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types)\r\n\r\n"],"correctAns":2},{"query":" Q15. What will be returned when this method is executed?","options":[" nothing\r\n"," a Boolean\r\n"," a string variable\r\n"," an integer\r\n\r\n**Reference** [Official documentation: void](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/void)\r\n\r\n"],"correctAns":1},{"query":" Q16. In what order would the employee names in this example be printed to the console?","code":"cs\r\nstring[] employees = { \"Joe\", \"Bob\", \"Carol\", \"Alice\", \"Will\" };\r\n\r\nIEnumerable<string> employeeQuery = from person in employees\r\n                                    orderby person\r\n                                    select person;\r\n\r\nforeach(string employee in employeeQuery)\r\n{\r\n    Console.WriteLine(employee);\r\n}\r\n","options":[" ascending\r\n"," unordered\r\n"," descending\r\n"," first in, first out\r\n\r\n**Reference** [dotnetpattern: LINQ OrderBy Operator](http://dotnetpattern.com/linq-orderby-operator)\r\n\r\n"],"correctAns":1},{"query":" Q17. Lambda expressions are often used in tandem with which of the following?","options":[" Namespaces\r\n"," LINQ\r\n"," Type Aliasing\r\n"," Assemblies\r\n\r\n**Reference** [Official documentation: Language Integrated Query (LINQ) Overview](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/)\r\n\r\n"],"correctAns":2},{"query":" Q18. What is the correct formatting for single line and multiline comments?","options":[" /_/ - Single Line\r\n      /_ - Multiline\r\n"," // Multiline\r\n      /_ Single Line _/\r\n"," //\\* Multiline\r\n      / Single Line\r\n"," // Single Line\r\n      /_ Multiline _/\r\n\r\n**Reference** [w3schools: C# Comments](https://www.w3schools.com/cs/cs_comments.php)\r\n\r\n"],"correctAns":4},{"query":" Q19. How do you make a method in an abstract class overridable?","options":[" Make it public\r\n"," Make it static\r\n"," Make it private\r\n"," Make it virtual\r\n\r\n**Reference** [Official documentation: virtual](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual)\r\n\r\n**Reference** [Official documentation: abstract](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract)\r\n\r\n"],"correctAns":4},{"query":" Q20. How would you write code for an integer property called Age with a getter and setter?","options":[" public int Age { get - set }\r\n"," public int Age: get set;\r\n"," public int Age (get, set );\r\n"," public int Age { get; set; }\r\n\r\n**Reference** [Official documentation: Using Properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties)\r\n\r\n"],"correctAns":4},{"query":" Q21. What is an abstract class?","options":[" a class that is denoted by the class keyword (can be seen and used by any other class in the system--thus it is by default public)\r\n"," something denoted by the abstract keyword and used system wide; if you want any program to create an object of a class you use the abstract class\r\n"," a class that is denoted by the virtual keyword\r\n"," a class that can be used only as base class\r\n\r\n**Reference** [Official documentation: Abstract and Sealed Classes and Class Members](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members)\r\n\r\n"],"correctAns":4},{"query":" Q22. When using a thread pool what happens to a given thread after it finishes its task?","options":[" The thread is destroyed and memory is freed up.\r\n"," The thread runs in loop until the next assignment.\r\n"," The thread goes inactive in the background and waits for garbage collection.\r\n"," The thread returns to the pool for reuse.\r\n\r\n**Reference** [Official documentation: Thread pool characteristics](https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool#thread-pool-characteristics)\r\n\r\n"],"correctAns":4},{"query":" Q23. Which choice represents a class that inherits behavior from a base class?","options":[" a second base class\r\n"," a revised class\r\n"," a derived class\r\n"," a parent class\r\n\r\n**Reference** [Official documentation: Inheritance](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance)\r\n\r\n"],"correctAns":3},{"query":" Q24. What does operator overloading allow you to do?","options":[" hide built-in operatores when necessary\r\n"," add methods to be interpreted by the compiler at runtime\r\n"," define how enums and other primitive value types work within the rest of the application\r\n"," define custom functionality for common operators like addition and equality\r\n\r\n**Reference** [Official documentation: Operator overloading](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading)\r\n\r\n"],"correctAns":4},{"query":" Q25. What it the main purpose of LINQ?","options":[" to delete duplicate data\r\n"," to bind namespaces and assemblies\r\n"," to query and transform data\r\n"," to connect assemblies\r\n\r\n**Reference** [Official documentation: Language Integrated Query (LINQ) Overview](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/#query-expression-overview)\r\n\r\n"],"correctAns":3}]