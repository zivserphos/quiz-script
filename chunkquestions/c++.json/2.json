[{"query":" Q26. What is the output of this code?","code":"cpp\r\nprintf(\"1/2 = %f\",(float)(1/2));\r\n","options":[" 1/2 = 0.499999\r\n"," 1/2 = 0\r\n"," 1/2 = 0.000000\r\n"," 1/2 = 0.5\r\n\r\n"],"correctAns":3},{"query":" Q27. What is the difference between a public and a private class member?","options":[" Public members are the same as global variables, so every part of the code has access to them. Private members are the same as automatic variables, so only their class has access to them.\r\n"," Public members are made accessible to any running application. Private members are made accessible only to the application where the object is instantiated.\r\n"," Public members will be compiled as shared variables in a multithreaded environment. Private members will be compiled as Thread-local variables.\r\n"," Public members can be accessed by any function. Private members can be accessed only by the same class's member functions and the friends of the class.\r\n\r\n"],"correctAns":4},{"query":" Q28. What is the value of `x` after running this code?","code":"cpp\r\nint x=10, a=-3;\r\nx=+a;\r\n","options":[" 3\r\n"," 7\r\n"," -3\r\n"," 13\r\n\r\n"],"correctAns":3},{"query":" Q29. Which statement is true?","options":[" Only classes can have member variables and methods.\r\n"," C++ supports multiple inheritance.\r\n"," C++ supports only single inheritance.\r\n"," Only structs can inherit.\r\n\r\n"],"correctAns":2},{"query":" Q30. Consider a pointer to void, named `ptr`, which has been set to point to a floating point variable `g`. Which choice is a valid way to dereference `ptr` to assign its pointed value to a float variable `f` later in the program?","code":"cpp\r\nfloat g;\r\nvoid *ptr=&g;\r\n","options":[" `float f=*(float)ptr;`\r\n"," `float f=(float *)ptr;`\r\n"," `float f=(float)*ptr;`\r\n"," `float f=*(float *)ptr;`\r\n\r\n"],"correctAns":4},{"query":" Q31. What is the `.*` operator and what does it do?","options":[" It is the same as the class member access operator, or arrow operator `(->)`, which allows you to access a member of an object through a pointer to the object.\r\n"," It is the pointer to member operator, and it allows you to access a member of an object through a pointer to that specific class member.\r\n"," It is the member access with address of operator, which returns the address of a class or struct member.\r\n"," It is a combination of the member access operator `(.)` and the dereference operator `(*)`, so it allows you to access the object that a member pointer points to.\r\n\r\n"],"correctAns":2},{"query":" Q32. For these declarations, which choice shows four equivalent ways to assign the character \"y\" in the string to a char variable c?","code":"cpp\r\nchar buff[50] = \"strings as arrays of characters are fun!\"\r\nchar *str = buff+11;\r\nchar c;\r\n","options":[" A\r\n\r\n```cpp\r\nc = buff[16];\r\nc = str[5];\r\nc = *(buff+16);\r\nc = *(str+5);\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\nc = *(buff[15]);\r\nc = *(str[4]);\r\nc = buff+15;\r\nc = str+4;\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\nc = buff[15];\r\nc = str[4];\r\nc = *(buff+15);\r\nc = *(str+4);\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\nc = *(buff[16]);\r\nc = *(str[5]);\r\nc = buff+16;\r\nc = str+5;\r\n```\r\n\r\n"],"correctAns":3},{"query":" Q33. Which choice is the correct declaration for the class named Dog, derived from the Animal class?","code":"cpp\r\nclass Animal{\r\n    //....\r\n}\r\n","options":[" A\r\n\r\n```cpp\r\nclass Dog :: public Animal {\r\n   //....\r\n};\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\nclass Dog : public Animal {\r\n   //....\r\n};\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\npublic class Animal :: Dog {\r\n   //....\r\n};\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\npublic class Dog extends Animal {\r\n   //....\r\n};\r\n```\r\n\r\n"],"correctAns":2},{"query":" Q34. What is the output of this code?","code":"cpp\r\n#include <cstdio>\r\nusing namespace std;\r\n\r\nint main(){\r\n    char c = 255;\r\n    if(c>10)\r\n        printf(\"c = %i, which is greater than 10\", c);\r\n    else\r\n        printf(\"c = %i, which is less than 10\", c);\r\n    return 0;\r\n}\r\n","options":[" c = -1, which is less than 10\r\n"," c = 255, which is greater than 10\r\n"," c = -1, which is greater than 10\r\n"," c = 255, which is less than 10\r\n\r\n"],"correctAns":1},{"query":" Q35. How can C++ code call a C function?","options":[" by simply calling the C code\r\n"," there is no way for C++ to call a C function\r\n"," by using extern \"C\"\r\n"," by importing the source C code\r\n\r\n"],"correctAns":3},{"query":" Q36. Which choice is _not_ a valid type definition of a structure that contains x and y coordinates as integers, and that can be used exactly as shown for the variable named `center`?","code":"\r\ncoord center;\r\ncenter.x = 5;\r\ncenter.y = 3;\r\n","options":[" A\r\n\r\n```cpp\r\ntypedef struct coord {\r\n    int x;\r\n    int y;\r\n};\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\ntypedef struct coord {\r\n    int x;\r\n    int y;\r\n} coord;\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\ntypedef struct {\r\n    int x;\r\n    int y;\r\n} coord;\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\nstruct coord {\r\n    int x;\r\n    int y;\r\n};\r\n\r\ntypedef struct coord coord;\r\n```\r\n\r\n"],"correctAns":1},{"query":" Q37. Which choice does _not_ produce the same output as this code snippet? Assume the variable `i` will not be used anywhere else in the code.","code":"cpp\r\nfor (i=1;i<10;i++){\r\n    cout<<i<<endl;\r\n}\r\n","options":[" A\r\n\r\n```cpp\r\ni=1;\r\nwhile(i<10){\r\n    cout<<++i<<endl;\r\n}\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\nfor (int i:{1,2,3,4,5,6,7,8,9}) {\r\n    cout<<i<<endl;\r\n}\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\ni = 1;\r\ndo {\r\n    cout<<i++<<endl;\r\n} while(i<10);\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\ni = 1;\r\nloop:\r\n    cout<<i++<<endl;\r\n    if(i<10) goto loop;\r\n```\r\n\r\n"],"correctAns":1},{"query":" Q38. What does this part of a main.cpp file do?","code":"cpp\r\n#include \"library.h\"\r\n","options":[" It causes the toolchain to compile all the contents of library.h so that its executable code is available when needed by the final application.\r\n"," It cherry picks library.h for the declarations and definitions of all data and functions used in the remainder of the source file main.cpp, finally replacing the `#include` directive by those declarations and definitions.\r\n"," It informs the linker that some functions or data used in the source file main.cpp are contained in library.h, so that they can be called in run time. This is also known as dynamic linking.\r\n"," It causes the replacement of the `#include` directive by the entire contents of the source file library.h. This is similar to a Copy-Paste operation of library.h into main.cpp.\r\n\r\n"],"correctAns":4},{"query":" Q39. Consider this function declaration of `is_even`, which takes in an integer and returns true if the argument is an even number and false otherwise. Which declarations are correct for overloaded versions of that function to support floating point numbers and string representations of numbers?","code":"cpp\r\nbool is_even(int);\r\n","options":[" A\r\n\r\n```cpp\r\nbool is_even(float f);\r\nbool is_even(char *str);\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\nbool is_even(float f);\r\nbool is_even(char str);\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\nbool is_even_float(float f);\r\nbool is_even_str(char *str);\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\nfloat is_even(float f);\r\nchar *is_even(char *str);\r\n```\r\n\r\n"],"correctAns":1},{"query":" Q40. Which choice is an include guard for the header file `my_library.h`?","code":null,"options":[" A\r\n\r\n```cpp\r\n#ifdef MY_LIBRARY_H\r\n#define MY_LIBRARY_H\r\n\r\n// my_library.h content\r\n\r\n#endif /* MY_LIBRARY_H */\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\n#ifndef MY_LIBRARY_H\r\n#define MY_LIBRARY_H\r\n\r\n// my_library.h content\r\n\r\n#endif /* MY_LIBRARY_H */\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\n#ifdef MY_LIBRARY_H\r\n#undef MY_LIBRARY_H\r\n\r\n// my_library.h content\r\n\r\n#endif /* MY_LIBRARY_H */\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\n#define MY_LIBRARY_H\r\n#include MY_LIBRARY_H\r\n\r\n// my_library.h content\r\n\r\n#undef MY_LIBRARY_H\r\n```\r\n\r\n"],"correctAns":2},{"query":" Q41. What's wrong with this definition when using a pre-C++11 compiler?","code":"cpp\r\nstd::vector<std::vector<int>> thematrix;\r\n","options":[" There's nothing wrong with it.\r\n"," An `std::vector` cannot contain more `std::vector` containers as its elements.\r\n"," The correct syntax should be: `std::vector[std::vector[int]] thematrix;`\r\n"," `>>` is parsed as the shift-right operator, and thus results in a compile error.\r\n\r\n"],"correctAns":4},{"query":" Q42. What is the statement below equivalent to?","code":"cpp\r\nsprite->x\r\n","options":[" `sprite.x`\r\n"," `sprite.*x`\r\n"," `(*sprite).x`\r\n"," `*sprite.x`\r\n\r\n"],"correctAns":3},{"query":" Q43. Consider a class named `complexNumber`. Which code will result in an equivalent object?","code":"cpp\r\ncomplexNumber(float real, float im)\r\n: real_part(real),\r\n im_part(im){}\r\n","options":[" A\r\n\r\n```cpp\r\ncomplexNumber(float real, float im) {\r\n    this->real = real_part;\r\n    this->im = im_part;\r\n}\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\ncomplexNumber(float real, float im) {\r\n    this->real_part(real);\r\n    this->im_part(im);\r\n}\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\ncomplexNumber(float real, float im) {\r\n    this->real_part = real;\r\n    this->im_part = im;\r\n}\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\ncomplexNumber(float real, float im) {\r\n    this->real_part = &real;\r\n    this->im_part = &im;\r\n}\r\n```\r\n\r\n"],"correctAns":3},{"query":" Q44. What is the result from executing this code snippet?","code":"cpp\r\nbool x=true, y=false;\r\nif(~x || y){\r\n    /*part A*/\r\n}\r\nelse{\r\n    /*part B*/\r\n}\r\n","options":[" Part A executes because the expression `(~x || y)` always results in true if `y==false`.\r\n"," Part B executes because the statement `(~x || y)` is invalid, thus false.\r\n"," Part A executes because `~x` is not zero, meaning true.\r\n"," Part B executes because `~x` is false and `y` is false, thus the `OR` operation evaluates as false.\r\n\r\n"],"correctAns":4},{"query":" Q45. What would be the output of this code?","code":"cpp\r\nint32_t nums[3]={2,4,3};\r\nstd::cout << ( nums[0] << nums[1] << nums[2] );\r\n","options":[" The output is the addresses of `nums[0]`, `nums[1]`, and `nums[2]`, in that order, with no spaces.\r\n"," `256`\r\n"," `0`\r\n"," `243`\r\n\r\n"],"correctAns":2},{"query":" Q46. What is the output of this code?","code":"cpp\r\nfloat values[5]={0.54f, 2.71828f, 3.14159f, 5.499999f, 10.0f};\r\nfor(auto f:values)\r\n    printf(\"%i \",(int)(f+0.5f));\r\n","options":[" `0.54 2.71828 3.14159 5.499999 10.0`\r\n"," `1 3 4 6 11`\r\n"," `0 2 3 5 10`\r\n"," `1 3 3 5 10`\r\n\r\n"],"correctAns":4},{"query":" Q47. Which of the following STL classes is the best fit for implementing a phonebook? Suppose each entry contains a name and a phone number, with no duplicates, and you want to have lookup by name.","options":[" `std::priority_queue`\r\n"," `std::list`\r\n"," `std::vector`\r\n"," `std::map`\r\n\r\n"],"correctAns":4},{"query":" Q48. What does this program do?","code":"cpp\r\n#include <iostream>\r\n#include <fstream>\r\nusing namespace std;\r\n\r\nint main(){\r\n    ifstream file1(\"text1.txt\", ios::binary);\r\n    ofstream file2(\"text2.txt\", ios::binary);\r\n    file2 << file1.rdbuf();\r\n}\r\n","options":[" It renames text1.txt to text2.txt.\r\n"," It makes a directory called text2.txt and moves text1.txt there.\r\n"," It copies the contents of text1.txt into text2.txt - i.e., it makes a copy of text1.txt, named text2.txt.\r\n"," It appends the contents of text1.txt into text2.txt - i.e., replaces the contents of text2.txt by the concatenation of text2.txt and text1.txt.\r\n\r\n"],"correctAns":3},{"query":" Q49. Which of the following is _not_ a consequence of declaring the member variable count of my_class as static?","code":"cpp\r\nclass my_class {\r\n    public: static int count;\r\n}\r\n","options":[" The variable cannot be modified by any part of the code in the same application or thread. However, other threads may modify it.\r\n"," The variable exists even when no objects of the class have been defined so it can be modified at any point in the source code.\r\n"," The variable is allocated only once, regardless of how many objects are instantiated because it is bound to the class itself, not its instances.\r\n"," All objects that try to access their count member variable actually refer to the only class-bound static count variable.\r\n\r\n"],"correctAns":1},{"query":" Q50. What is the assumed type of a constant represented in the source code as `0.44`?","options":[" double\r\n"," long float\r\n"," long double\r\n"," float\r\n\r\n"],"correctAns":1}]