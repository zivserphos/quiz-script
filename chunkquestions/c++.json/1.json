[{"query":" Q1. What is printed from this code?","code":"cpp\r\nvector<int> v(22);\r\nbool b = (v[6]);\r\nprintf(\"%d\", !b);\r\n","options":[" False\r\n"," 0\r\n"," 1\r\n"," This code has an error.\r\n\r\n"],"correctAns":3},{"query":" Q2. Which of the following is a reason why using this line is considered a bad practice? (_Alternative_: Why is using this line considered a bad practice?)","code":"cpp\r\nUsing namespace std;\r\n","options":[" The compiled code is always bigger because of all of the imported symbols.\r\n"," If the code uses a function defined in two different libraries with the same prototype but possibly with different implementations, there will be a compilation error due to ambiguity.\r\n"," It automatically includes all header files in the standard library (cstdint, cstdlib, cstdio, iostream, etc).\r\n"," It causes the compiler to enforce the exclusive inclusion of header files belonging to the standard library, generating compilation error when a different header file is included.\r\n\r\n"],"correctAns":2},{"query":" Q3. What is the smallest size a variable of the type child_t may occupy in memory?","code":"cpp\r\ntypedef struct{\r\n    unsigned int  age    : 4;\r\n    unsigned char gender : 1;\r\n    unsigned int  size   : 2;\r\n}child_t;\r\n","options":[" 7 bits.\r\n"," 25 bytes.\r\n"," 1 bit.\r\n"," 1 byte.\r\n\r\n"],"correctAns":1},{"query":" Q4. Which of the following shows the contents of vector v1 and v2 after running this code?","code":"cpp\r\nstd::vector<int> v1{1,2,3},v2;\r\nv2=v1;\r\nv1.push_back(4);\r\nv2.push_back(5);\r\n","options":[" Error\r\n"," v1:{1,2,3,4}; v2:{5};\r\n"," v1:{1,2,3,4,5}; v2:{1,2,3,4,5};\r\n"," v1:{1,2,3,4}; v2:{1,2,3,5};\r\n\r\n"],"correctAns":4},{"query":" Q5. Which of the following is a true statement about the difference between pointers and iterators?","options":[" While pointers are variable that hold memory address, iterators are generic functions used to traverse containers. These function allows the programmer to implement read and write code as the container is traversed.\r\n"," Incrementing an iterator always means access the next element in the container(if any), no matter the container. Incrementing the pointer means pointing to the next element in memory, not always the next element.\r\n"," Pointers are variables that hold memory address where as iterator are unsigned integers that refers to offsets in arrays.\r\n"," All iterator are implemented with pointers so all iterators are pointers but not all pointers are iterators.\r\n\r\n"],"correctAns":2},{"query":" Q6. What's a benefit of declaring the parameter as a const reference instead of declaring it as a regular object?","code":"cpp\r\nint median(const my_array& a);\r\n","options":[" The argument is passed as a reference, so the function receives a copy that can be modified without affecting the original value.\r\n"," The argument is passed as a reference, so if the passed my_array object is large, the program will require less time and memory.\r\n"," Actually objects can't be passed as regular variables because they require a constructor call. Therefore a const reference is the only way to pass class instances to functions.\r\n"," There are no benefits because a reference and an object are treated as the same thing.\r\n\r\n"],"correctAns":2},{"query":" Q7. What's the storage occupied by u1?","code":"cpp\r\nunion {\r\n    unit16_t a;\r\n    unit32_t b;\r\n    int8_t c;\r\n} u1;\r\n","options":[" 4 bytes\r\n"," 7 bytes\r\n"," 8 bytes\r\n"," 2 bytes\r\n\r\n"],"correctAns":1},{"query":" Q8. Which of the following operators is overloadable?","options":[" `?:`\r\n"," `new`\r\n"," `::`\r\n"," `.`\r\n\r\n"],"correctAns":2},{"query":" Q9. Which of the following shows the contents of vector pointed by v1 and v2 after running this code?","code":"cpp\r\nstd:: vector<int> *v1 = new std::vector<int>({1,2,3});\r\nstd:: vector<int> *v2;\r\nv2=v1;\r\nv1->push_back(4);\r\nv2->push_back(5);\r\n","options":[" `*v1:{1,2,3,4}; *v2:{5};`\r\n"," `*v1:{1,2,3,4,5}; *v2:{1,2,3,4,5};`\r\n"," Error\r\n"," `*v1:{1,2,3,4}; *v2:{1,2,3,5};`\r\n\r\nv1 and v2 point to the same vector.\r\n\r\n"],"correctAns":2},{"query":" Q10. Which of the following is not a difference between a class and a struct?","options":[" Because structs are part of the C programming language, there are some complexity between C and C++ structs. This is not the case with classes.\r\n"," Classes may have member functions; structs are private.\r\n"," The default access specifier for members of struct is public, whereas for member of class, it is private.\r\n"," Template type parameters can be declared with classes, but not with the struct keyword.\r\n\r\n"],"correctAns":2},{"query":" Q11. Suppose you need to keep a data struct with permission to access some resource based on the days of the week, but you can't use a bool variable for each day. You need to use one bit per day of the week. Which of the following is a correct implementation of a structure with bit fields for this application?","code":null,"options":[" A\r\n\r\n```cpp\r\ntypedef struct {\r\n    int sunday:1;\r\n    int monday:1;\r\n    // more days\r\n    int friday:1;\r\n    int saturday:1;\r\n} weekdays;\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\ntypedef char[7]: weekdays;\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\ntypedef struct {\r\n    bit sunday:1;\r\n    bit monday:1;\r\n    // more days\r\n    bit friday:1;\r\n    bit saturday:1;\r\n} weekdays;\r\n\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\ntypedef struct {\r\n    bit sunday;\r\n    bit monday;\r\n    // more days\r\n    bit friday;\r\n    bit saturday;\r\n} weekdays;\r\n```\r\n\r\n_NOTE_: Correct syntax is that each variable size is 1 bit. `bit` is not a type in C++. "],"correctAns":1},{"query":" Q12. What is an lvalue?","options":[" It's a constant expression, meaning an expression composed of constants and operations.\r\n"," It's an expression that represents an object with an address.\r\n"," It's an expression suitable for the left-hand side operand in a binary operation.\r\n"," It's a location value, meaning a memory address suitable for assigning to a pointer or reference.\r\n\r\n"],"correctAns":2},{"query":" Q13. What does auto type specifier do in this line of code (since C++11)?","code":"cpp\r\nauto x = 4000.22;\r\n","options":[" It specifies that the type of x will be deduced from the initializer - in this case, double.\r\n"," It specifies that the type of x is automatic meaning that if can be assigned different types of data throughout the program.\r\n"," It specifies that x is a variable with automatic storage duration.\r\n"," It specifies that more memory will be allocated for x in case it needs more space, avoiding loss of data due to overflow.\r\n\r\n"],"correctAns":1},{"query":" Q14. A class template is a **\\_**?","options":[" class written with the generic programming paradigm, specifying behavior in terms of type parameter rather than specific type.\r\n"," blank superclass intended for inheritance and polymorphism.\r\n"," lass that only consists of member variable, with no constructor, destructor nor member functions.\r\n"," skeleton source code for a class where the programmer has to fill in specific parts to define the data types and algorithms used.\r\n\r\n"],"correctAns":1},{"query":" Q15. What is the ternary operator equivalent to this code snippet?","code":"cpp\r\nif(x)\r\n    y=a;\r\nelse\r\n    y=b;\r\n","options":[" `y=a?b:x;`\r\n"," `y=if(x?a:b);`\r\n"," `y=(x&a)?a:(x&b)?b:0;`\r\n"," `y=x?a:b;`\r\n\r\n"],"correctAns":4},{"query":" Q16. What is the output of this code?","code":"cpp\r\n#include <iostream>\r\n\r\nint main(){\r\n    int x=10, y=20;\r\n    std::cout << \"x = \" << x++ << \" and y = \" << --y << std::endl;\r\n    std::cout << \"x = \" << x-- << \" and y = \" << ++y << std::endl;\r\n    return(0);\r\n}\r\n","options":[" `x = 10 and y = 20`  \r\n       `x = 11 and y = 19`\r\n"," `x = 11 and y = 19`  \r\n       `x = 10 and y = 20`\r\n"," `x = 10 and y = 19`  \r\n       `x = 11 and y = 20`\r\n"," `x = 11 and y = 20`  \r\n       `x = 10 and y = 19`\r\n\r\n"],"correctAns":3},{"query":" Q17. What is the meaning of the two parts specified between parentheses in a range-based for loop, separated by a colon?","options":[" The first is a variable declaration that will hold an element in a sequence. The second is the sequence to traverse.\r\n"," The first is an iterator, and the second is the increment value to be added to the iterator.\r\n"," The first is the iterating variable. The second is an `std::pair` that specifies the range (start and end) in which the variable will iterate.\r\n"," The first is a container object. The second is an `std::pair` that specifies the range (start and end) in which the elements will be accessed within the loop.\r\n\r\n"],"correctAns":1},{"query":" Q18. What is the output of this piece of code?","code":"cpp\r\nint8_t a=200;\r\nuint8_t b=100;\r\nif(a>b)\r\n    std::cout<<\"greater\";\r\nelse\r\n    std::cout<<\"less\";\r\n","options":[" There is no output because there is an exception when comparing an int8_t with a uint8_t.\r\n"," greater\r\n"," less\r\n"," There is no output because there is a compiler error.\r\n\r\n"],"correctAns":3},{"query":" Q19. What results from executing this code snippet?","code":"cpp\r\nint x=5, y=2;\r\nif(x & y) {\r\n    /*_part A_*/\r\n}\r\nelse {\r\n    /*_part B_*/\r\n}\r\n","options":[" Part A executes because x==5 (true) and y==2 (true), thus the AND operation evaluates as true.\r\n"," Part B executes because (x & y) results in 0, or false.\r\n"," Part A executes because (x & y) results in a nonzero value, or true.\r\n"," Part B executes because the statement (x & y) is invalid, thus false.\r\n\r\n"],"correctAns":2},{"query":" Q20. What is a valid definition for the `get_length` function, which returns the length of a null-terminated string?","code":null,"options":[" A\r\n\r\n```cpp\r\nint get_length(char *str) {\r\n    int count=0;\r\n    while(str[count++]);\r\n    return count-1;\r\n}\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\nint get_length(char *str) {\r\n    int count=0;\r\n    while(str!=NULL){\r\n        count++;\r\n        str++;\r\n    }\r\n    return count;\r\n}\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\nint get_length(char *str) {\r\n    int count=0;\r\n    while((*str)++)\r\n        count++;\r\n    return count;\r\n}\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\nint get_length(char *str) {\r\n    int count=0;\r\n    while(str++)\r\n        count++;\r\n    return count;\r\n}\r\n```\r\n\r\n"],"correctAns":1},{"query":" Q21. Which STL class is the best fit for implementing a collection of data that is always ordered so that the pop operation always gets the greatest of the elements? Suppose you are interested only in push and pop operations.","options":[" `std::list`\r\n"," `std::vector`\r\n"," `std::priority_queue`\r\n"," `std::map`\r\n\r\n"],"correctAns":3},{"query":" Q22. What is the meaning of the three sections specified between parentheses in a for loop separated by semicolons?","options":[" The first is the iterating variable name, the second is the number of times to iterate, and the third is the desired increment or decrement (specified with a signed integer).\r\n"," The first is the initialization block, the second is the condition to iterate, and the third is the increment block.\r\n"," The first is the iterating variable, the second is the container in which it should operate, and the third is an exit condition to abort at any time.\r\n"," The first is the iterating variable name, the second is the starting value for the iterating variable, and the third is the stop value (the last value plus one).\r\n\r\n"],"correctAns":2},{"query":" Q23. What is printed from this code?","code":"cpp\r\nint i = 0;\r\nprintf(\"%d\", i++);\r\nprintf(\"%d\", i--);\r\nprintf(\"%d\", ++i);\r\nprintf(\"%d\", --i);\r\n","options":[" 0,1,1,0\r\n"," 0,1,0,1\r\n"," 0,0,1,0\r\n"," 1,0,1,0\r\n\r\n"],"correctAns":1},{"query":" Q24. What is true about the variable named `ptr`?","code":"cpp\r\nvoid *ptr;\r\n","options":[" It is a pointer initialized at NULL.\r\n"," It is a pointer to a void function.\r\n"," That declaration causes a compiler error, as pointers must specify a type.\r\n"," It is a pointer to a value with no specific type, so it may be cast to point to any type.\r\n\r\n"],"correctAns":4},{"query":" Q25. What is the output of this code?","code":"cpp\r\nint c=3; char d='A';\r\nstd::printf(\"c is %d and d is %c\",c,d);\r\n","options":[" c is d and d is c\r\n"," c is A and d is 3\r\n"," c is 3 and d is A\r\n"," c is c and d is d\r\n\r\n"],"correctAns":3}]