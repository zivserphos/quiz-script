[{"query":" Q51. What is the output of this piece of code?","code":"cpp\r\nint8_t a=200;\r\nuint8_t b=100;\r\nstd::cout<<\"a=\"<<(int)a;\r\nstd::cout<<\", b=\"<<(int)b;\r\n","options":[" a=-56, b=100\r\n"," a=-55, b=100\r\n"," a=200, b=-156\r\n"," a=200, b=100\r\n\r\n"],"correctAns":1},{"query":" Q52. What is an appropriate way of removing `my_object` as shown below?","code":"cpp\r\nmy_class *my_object = new my_class();\r\n","options":[" `delete(my_object);`\r\n"," `free(my_object);`\r\n"," The garbage collector will destroy the object eventually.\r\n"," Exiting the scope will destroy the object.\r\n\r\n"],"correctAns":1},{"query":" Q53. What is the correct way to call the `count` member function for the object pointer called `grades`?","code":"cpp\r\nclass my_array{\r\n    public:\r\n        int count();\r\n};  // ... more members above\r\n\r\nint main(){\r\n    my_array *grades = new my_array();\r\n};  // ... more code above\r\n","options":[" `grades.count();`\r\n"," `my_array->count();`\r\n"," `grades->count();`\r\n"," `my_array.count();`\r\n\r\n"],"correctAns":3},{"query":" Q54. What would be the output of this code?","code":"cpp\r\nint i0=4, i1=6, i2=8;\r\nint& nums[3]={i2,i0,i1};\r\nstd::cout<<nums[0]<<nums[1]<<nums[2];\r\n","options":[" There is no output. The code causes a compiler error because `nums` is an array of references, which is illegal.\r\n"," 846\r\n"," The output is the addresses of `i2`, `i0`, and `i1`, in that order, with no spaces.\r\n"," 468\r\n\r\n"],"correctAns":1},{"query":" Q55. Does this code cause a compiler error? If so, why, and if not, what is `child_t`?","code":"cpp\r\ntypedef struct{\r\n    unsigned int  age    : 4;\r\n    unsigned char gender : 1;\r\n    char                 : 0;\r\n    unsigned int  size   : 2;\r\n}child_t;\r\n","options":[" Yes, it causes a compiler error because the colon character is not allowed in struct definitions.\r\n"," and `child_t` is a type defined as a structure with bit fields. It has 4 bits for age and 1 bit for gender in the first byte, and 2 bits for size in the second byte.\r\n"," Yes, it causes a compiler error because there is an unnamed field.\r\n"," Yes, it causes a compiler error because one field is defined as having a size of 0.\r\n\r\n"],"correctAns":2},{"query":" Q56. What is this expression equivalent to?","code":"cpp\r\nA->B->C->D\r\n","options":[" `A.B.C.D`\r\n"," `*A.*B.*C.*D`\r\n"," `&A.&B.&C.&D`\r\n"," `*(*((*A).B).C).D`\r\n\r\n"],"correctAns":4},{"query":" Q57. What does this function do?","code":"cpp\r\nauto buff = new char[50];\r\nstd::memset(buff,20,50);\r\n","options":[" It declares a memory buffer named buff that starts at address 20 and ends at address 70.\r\n"," It sets all bits in the array named buffer from its element at index 20 to its element at index 50.\r\n"," It writes the value 20 in every memory address from buff to buff+49.\r\n"," It declares a memory buffer named buff that starts at address 20 and ends at address 50.\r\n\r\n"],"correctAns":3},{"query":" Q58. Consider a class named `CustomData`. Which choice is a correct declaration syntax to overload the postfix `++` operator as a class member?","options":[" `CustomData& operator++();`\r\n"," `void operator++(CustomData);`\r\n"," `CustomData operator++(CustomData);`\r\n"," `CustomData operator++(int);`\r\n\r\n"],"correctAns":4},{"query":" Q59. You want to sort my_array, declared below. Which choice is the correct call to std::sort, using a lambda expression as the comparison function?","code":"cpp\r\nstd::array<uint32_t, 50> my_array;\r\n","options":[" A\r\n\r\n```cpp\r\nstd::sort(my_array.begin(), my_array.end(),\r\n    [](uint32_t a, uint32_t b) {\r\n        return a < b;\r\n    })\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\nlambda(uint32_t a, uint32_t b){\r\n    return a < b;\r\n}\r\nstd::sort(my_array.begin(), my_array.end(), lambda);\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\nstd::sort(my_array.begin(), my_array.end(),\r\n    lambda(uint32_t a, uint32_t b){\r\n        return a < b;\r\n    })\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\nlambda(uint32_t a, uint32_t b){\r\n    return a < b;\r\n}\r\nstd::sort(my_array.begin(), my_array.end(), &lambda);\r\n```\r\n\r\n"],"correctAns":1},{"query":" Q60. Which choice is the most reasonable implementation of the function std::mutex::lock() by using std::mutex::try_lock()?","code":null,"options":[" A\r\n\r\n```cpp\r\nvoid std::mutex::lock(){\r\n    while(!this->try_lock());\r\n}\r\n```\r\n\r\n"," B\r\n\r\n```cpp\r\nvoid std::mutex::lock(){\r\n    return (this->try_lock());\r\n}\r\n```\r\n\r\n"," C\r\n\r\n```cpp\r\nvoid std::mutex::lock(){\r\n    while(1)\r\n        this->try_lock();\r\n}\r\n```\r\n\r\n"," D\r\n\r\n```cpp\r\nvoid std::mutex::lock(){\r\n    while(this->try_lock());\r\n}\r\n```\r\n\r\n"],"correctAns":1},{"query":" Q61. What is the purpose of a destructor?","options":[" It allows the programmer to write the necessary code to free the resources acquired by the object prior to deleting the object itself.\r\n"," It deletes an object. One example of a destructor is the `delete()` function.\r\n"," It terminates a program. This may be achieved as a regular function call or as an exception.\r\n"," There are no destructors in C++.\r\n\r\n"],"correctAns":1},{"query":" Q62. Which STL class is the best fit for implementing a phonebook? Suppose each entry contains a name and a phone number, with no duplicates, and you want to have lookup by name.","options":[" `std::priority_queue`\r\n"," `std::map`\r\n"," `std::vector`\r\n"," `std::list`\r\n\r\n"],"correctAns":2},{"query":" Q63. What is the main difference between these two Functions?","code":"cpp\r\nstd::mutex::lock()\r\nstd::mutex::try_lock()\r\n","options":[" `lock()` has a higher privilege over `try_lock()`. This means that you have a better chance of acquiring a mutex `with lock()`.\r\n"," Both attempt to acquire a lock, but `lock()` blocks if the mutex is not available, whereas `try_lock()` returns whether the mutex is available or not.\r\n"," `lock()` enforces preemption, whereas `try_lock()` suggests preemption.\r\n"," If the mutex is not available, `try_lock()` returns with a corresponding code, whereas `lock()` snatches the mutex from the thread that currently has it.\r\n\r\n"],"correctAns":2},{"query":" Q64. What is one benefit of declaring the parameter as a `const` reference instead of declaring it as a regular object?","code":"cpp\r\nint median(const my_array& a)\r\n","options":[" Actually, objects cannot be passed as regular variables, because they require a constructor call. Therefore, a `const` reference is the only way to pass class instances to functions.\r\n"," There are no benefits because a reference and an object are treated as the same thing.\r\n"," The `const` qualifier Forbids the code to modify the argument, so the programmer can rest assured that the source object will remain unchanged.\r\n"," The argument is passed as a reference, so the Function receives a copy that can be modified without affecting the original variable.\r\n\r\nNote: This one is similar to Q6, but focuses on the `const` keyword.\r\n\r\n"],"correctAns":3},{"query":" Q65. What is an include guard?","options":[" a preprocessor directive that prevents inconsistent behaviors in lines that contain the #ifdef, #ifndef, or #elif directives\r\n"," a compiler option that prevents the user code from including additional libraries\r\n"," a preprocessor statement that prevents a source file from being included more than once in a project\r\n"," a library that adds safety features such as mutexes, watchdog timers, and assertions to the project\r\n\r\n"],"correctAns":3},{"query":" Q66. What would be the correct declaration of a default constructor for a class named Sprite?","code":null,"options":["\r\n  ```cpp\r\n  public:\r\n    \t\tSprite();\r\n  ```\r\n","\r\n  ```cpp\r\n  private:\r\n    \t\tvoid Sprite();\r\n  ```\r\n","\r\n  ```cpp\r\n  public:\r\n    \t\tvoid Sprite();\r\n  ```\r\n","\r\n  ```cpp\r\n     private:\r\n    \t\tSprite();\r\n  ```\r\n\r\n"],"correctAns":1},{"query":" Q67. What is the purpose of this line in a header file?","code":"cpp\r\n#pragma once\r\n","options":[" to restrict the use of its contents to only one source file\r\n"," to tell the compiler that only one variable can be instantiated from the classes or types contained in this header file\r\n"," to help the compiler finish faster by assuring that only one compiler pass is neccessary for the code included in this header file\r\n"," to make the compiler parse that header file only once, even if it is included multiple times in the source\r\n\r\n[reference here](https://en.cppreference.com/w/cpp/preprocessor/impl)\r\n\r\n"],"correctAns":4},{"query":" Q68. What is a variable of type double?","options":[" a 2-tuple\r\n"," an integer number\r\n"," a floating point number\r\n"," a string with more than 255 characters\r\n\r\n"],"correctAns":3},{"query":" Q69. Consider this function declaration of is_even, which takes in an integer and returns true if the argument is an even number and false otherwise. Which declarations are correct for overloaded versions of that function to support floating point numbers and string representations of numbers?","code":"cpp\r\nbool is_even(int);\r\n","options":[" bool is_even(float f); bool is_even(char \\*str);\r\n"," bool is_even(float f); bool is_even(char str);\r\n"," bool is_even_float(float f); bool is_even_str(char \\*str);\r\n"," float is_even(float f); char *is_even(char *str);\r\n\r\n"],"correctAns":1},{"query":" Q70. Other than shifting bits to the left, what is the << oprator used for ?","options":[" shifting characters to the left in a string.\r\n"," inserting characters into an output stream like std::cout.\r\n"," comparing floating point numbers as less-than.\r\n"," assigning a variable to a reference.\r\n\r\n"],"correctAns":2},{"query":" Q71. Does this code cause a compiler error? If so, why, and if not, what is `child_t`?","code":"cpp\r\ntypedef struct{\r\n    unsigned int  age    : 4;\r\n    unsigned char gender : 1;\r\n    char                 : 0;\r\n    unsigned int  size   : 2;\r\n}child_t;\r\n","options":[" Yes, it causes a compiler error because the colon character is not allowed in struct definitions.\r\n"," and `child_t` is a type defined as a structure with bit fields. It has 4 bits for age and 1 bit for gender in the first byte, and 2 bits for size in the second byte.\r\n"," Yes, it causes a compiler error because there is an unnamed field.\r\n"," Yes, it causes a compiler error because one field is defined as having a size of 0.\r\n\r\n"],"correctAns":2},{"query":" Q72. Which choice is a reason to specify the type of a pointer instead of using `void *`, which works as a pointer ro any type?","options":[" The compiler needs the dara type to make sure that the pointer is not going to be used on illegal non-pointable types such as functions, labels, pointers, and reference.\r\n"," `void *` does not work for any type. The language does not allow assigning anything other than `void` to a pointer to `void *`.\r\n"," The compiler needs the data type to know how much memory to allocate for the pointer, because different data types require different pointer lengths.\r\n"," Yes, it causes a compiler error because one field is defined as having a size of 0.\r\n\r\n"],"correctAns":3}]