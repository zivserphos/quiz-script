[{"query":" Q29. To use VBA code to maintain a different VBA project, you can make use of VBA's extensibility. What is needed to enable extensibility?","options":[" Set Macro Security to Trust Access to the VBA Project Object Model\r\n"," The project's workbook should be protected in the Ribbon's Review tab\r\n"," Include a reference to Microsoft VBA Extensibility 5.3\r\n"," Include a reference to Microsoft VBA Extensibility 5.3 and set Macro Security to Trust Access to the VBA Project Object Model\r\n\r\n"],"correctAns":3},{"query":" Q30. How do you add a user form to a VBA project?","options":["\r\n\r\n1. Select the project in the Project window of the Visual Basic Editor\r\n2. Click the Design Mode button and select Insert Mode\r\n\r\n","\r\n\r\n1. Select the project in the Project window of the Visual Basic Editor\r\n2. Click the Toolbox button and select UserForm\r\n\r\n","\r\n\r\n1. Select the project in the Project window of the Visual Basic Editor\r\n2. Right-click the Run menu and select Customize\r\n\r\n","\r\n\r\n1. Select the project in the Project window of the Visual Basic Editor\r\n2. Click Insert > UserForm\r\n\r\n"],"correctAns":4},{"query":" Q31. Explicit variable declaration is required. MyVar is declared at both the module and the procedure level. What is the value of MyVar after first AAA() and then BBB() are run?","code":"\r\nDim MyVar As String\r\nSub AAA()\r\nDim MyVar As String\r\nMyVar = \"Procedure AAA Scope\"\r\nEnd Sub\r\nSub BBB()\r\nMyVar = \"Procedure BBB Scope\"\r\nEnd Sub\r\n","options":[" MyVar equals \"Procedure AAA Scope\"\r\n"," ISNULL(MyVar) is TRUE\r\n"," MyVar equals \"Procedure BBB Scope\"\r\n"," MyVar is NULL\r\n\r\n"],"correctAns":3},{"query":" Q32. Which code block from class modules returns a compile error?","code":null,"options":["\r\n\r\n```\r\nPublic Property Get HDL() As Double\r\nHDL = pHDL\r\nEnd Property\r\nPublic Property Let HDL(Value As Double)\r\npHDL = Value\r\nEnd Property\r\n```\r\n\r\n","\r\n\r\n```\r\nProperty Get HDL() As Double\r\nHDL = Value\r\nEnd Property\r\nProperty Let HDL(Value As Double)\r\npHDL = Value\r\nEnd Property\r\n```\r\n\r\n","\r\n\r\n```\r\nPublic Property Get HDL() As Double\r\nHDL = Value\r\nEnd Property\r\nPublic Property Let HDL(Value As Double)\r\npHDL = Value\r\nEnd Property\r\n```\r\n\r\n","\r\n\r\n```\r\nPublic Property Get HDL() As Single\r\nHDL = pHDL\r\nEnd Property\r\nPublic Property Let HDL(Value As Double)\r\npHDL = Value\r\nEnd Property\r\n```\r\n\r\n"],"correctAns":4},{"query":" Q33. If VBA code declares FileCount as a constant rather than a variable, the code tends to run faster. Why is this?","options":[" The scope of constants is limited to the procedure that declares them\r\n"," Constants are declared at compile time, but variables are declared at run time\r\n"," Once declared in a project, the value of a constant cannot be changed. There is no need to look up the current value of FileCount when it is a constant.\r\n"," The Const declaraton specifies the most efficient type given the constant's value\r\n\r\n"],"correctAns":4},{"query":" Q34. A VBA project must declare four classes. How many class modules are needed?","options":[" two (one for the properties and one for the methods)\r\n"," one (each class is declared in the same module)\r\n"," four (one for each class)\r\n"," as many as are required by the variable types that the objects return\r\n\r\n"],"correctAns":4},{"query":" Q35. What does this code display?","code":"\r\nSub MakeErrors()\r\nDim Y As Variant, Z As Variant\r\nOn Error Resume Next\r\nY = 1 / 0\r\nMsgBox \"Y = \" & Y\r\nOn Error GoTo 0\r\nZ - (0 - 3) ^ 0.5\r\nMsgBox \"Z = \" & Z\r\nEnd Sub\r\n","options":[" an error message\r\n"," Y and Z\r\n"," Z = in a message box and then a subsequent errpr message\r\n"," Y = in a message box and then a subsequent errpr message\r\n\r\n"],"correctAns":3},{"query":" Q36. The VBA code block shown in the following four options runs when UserForm1's CommandButton1 button is clicked. Which block of code leaves UserFrom1 loaded but not visible until the FoundErrors function has checked it, and then enables processing to continue if no errors are found?","code":null,"options":["\r\n\r\n```\r\nPrivate Sub CommandButton1_Click()\r\nIf FoundErrors(Me) Then _\r\nMe.Show\r\nEnd Sub\r\n```\r\n\r\n","\r\n\r\n```\r\nPrivate Sub CommandButton1_Click()\r\nIf Not FoundErrors(UserForm1) Then _\r\nUnload UserForm1\r\nEnd Sub\r\n```\r\n\r\n"," <- not sure\r\n\r\n```\r\nPrivate Sub CommandButton1_Click()\r\nMe.Hide\r\nDo While FoundErrors(Me)\r\nMe.Show\r\nLoop\r\nEnd Sub\r\n```\r\n\r\n"," <- not sure\r\n\r\n```\r\nPrivate Sub CommandButton1_Click()\r\nDo While FoundErrors(UserForm1)\r\nUserForm1.show\r\nLoop\r\nEnd Sub\r\n```\r\n"],"correctAns":4}]