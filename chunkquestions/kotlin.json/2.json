[{"query":" Q26. The code below is expected to display the numbers from 1 to 10, but it does not. Why?","code":"kotlin\r\nval seq = sequence { yieldAll(1..20) }\r\n  .filter { it < 11 }\r\n  println(seq)\r\n","options":[" You cannot assign a sequence to a variable\r\n"," To produce result, a sequence must have terminal operation. In this case, it needs a `.toList()` ([reference](https://kotlinlang.org/docs/sequences.html#sequence-operations))\r\n"," The `.filter{ it < 11 }` should be `.filter{ it > 11 }`\r\n"," The `yieldAll(1..20)` should be `yieldAll(1..10)`\r\n\r\n"],"correctAns":2},{"query":" Q27. What three methods does this class have?","code":"kotlin\r\nclass Person\r\n","options":[" `equals(), hashCode(), and toString()` ([reference](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/))\r\n"," `equals(), toHash(), and super()`\r\n"," `print(), println(), and toString()`\r\n"," `clone(), equals(), and super()`\r\n\r\n"],"correctAns":1},{"query":" Q28. Which is the proper way to declare a singleton named DatabaseManager?","options":[" `object DatabaseManager {}` ([reference](https://kotlinlang.org/docs/object-declarations.html#object-declarations))\r\n"," `singleton DatabaseManager {}`\r\n"," `static class DatabaseManager {}`\r\n"," `data class DatabaseManager {}`\r\n\r\n"],"correctAns":1},{"query":" Q29. In order to subclass the Person class, what is one thing you must do?","code":"kotlin\r\nabstract class Person(val name: String) {\r\n  abstract fun displayJob(description: String)\r\n}\r\n","options":[" The subclass must be marked sealed\r\n"," You must override the `displayJob()` method ([reference](https://kotlinlang.org/docs/inheritance.html))\r\n"," You must mark the subclass as final\r\n"," An abstract class cannot be extended, so you must change it to open\r\n\r\n"],"correctAns":2},{"query":" Q30. The code snippet below translates a database user to a model user. Because their names are both User, you must use their fully qualified names, which is cumbersome. You do not have access to either of the imported classes' source code. How can you shorten the type names?","code":"kotlin\r\nimport com.tekadept.app.model.User\r\nimport com.tekadept.app.database.User\r\n\r\nclass UserService{\r\n  fun translateUser(user: com.tekadept.app.database.User): User =\r\n    com.tekadept.app.model.User(\"${user.first} ${user.last}\")\r\n}\r\n","options":[" Use import as to change the type name ([reference](https://kotlinlang.org/docs/packages.html#visibility-of-top-level-declarations))\r\n"," Create subtypes with shorter names\r\n"," Create interfaces with shorter names\r\n"," Create extension classes with shorter names\r\n\r\n"],"correctAns":1},{"query":" Q31. Your function is passed by a parameter obj of type Any. Which code snippet shows a way to retrieve the original type of obj, including package information?","options":[" `obj.classInfo()`\r\n"," `obj.typeInfo()`\r\n"," `obj::class.simpleName`\r\n"," `obj::class` ([reference](https://kotlinlang.org/docs/reflection.html#class-references))\r\n\r\n"],"correctAns":4},{"query":" Q32. Which is the correct declaration of an integer array with a size of 5?","options":[" `val arrs[5]: Int`\r\n"," `val arrs = IntArray(5)` ([reference](https://kotlinlang.org/docs/basic-types.html#primitive-type-arrays))\r\n"," `val arrs: Int[5]`\r\n"," `val arrs = Array<Int>(5)`\r\n\r\n"],"correctAns":2},{"query":" Q33. You have created a class that should be visible only to the other code in its module. Which modifier do you use?","options":[" `internal` ([reference](https://kotlinlang.org/docs/visibility-modifiers.html#classes-and-interfaces))\r\n"," `private`\r\n"," `public`\r\n"," `protected`\r\n\r\n"],"correctAns":1},{"query":" Q34. Kotlin has two equality operators, == and ===. What is the difference?","options":[" `==` determines if two primitive types are identical. `===` determines if two objects are identical\r\n"," `==` determines if two references point to the same object. `===` determines if two objects have the same value\r\n"," `==` determines if two objects have the same value. `===` determines if two strings have the same value\r\n"," `==` determines if two objects have the same value. `===` determines if two references point to the same object ([reference](https://kotlinlang.org/docs/equality.html#structural-equality))\r\n\r\n"],"correctAns":4},{"query":" Q35. Which snippet correctly shows setting the variable max to whichever variable holds the greatest value, a or b, using idiomatic Kotlin?","options":[" `val max3 = a.max(b)` (Extension Function is One of the idiomatic Solutions in Kotlin)\r\n"," `val max = a > b ? a : b`\r\n"," `val max = if (a > b) a else b`\r\n"," `if (a > b) max = a else max = b`\r\n\r\n"],"correctAns":1},{"query":" Q36. You have an enum class Signal that represents the state of a network connection. You want to print the position number of the SENDING enum. Which line of code does that?","code":"java\r\nenum class Signal { OPEN, CLOSED, SENDING }\r\n","options":[" `println(Signal.SENDING.position())`\r\n"," `println(Signal.SENDING.hashCode())`\r\n"," `println(Signal.SENDING)`\r\n"," `println(Signal.SENDING.ordinal)` ([reference](https://kotlinlang.org/docs/enum-classes.html#working-with-enum-constants))\r\n\r\n"],"correctAns":4},{"query":" Q37. Both const and @JvmField create constants. What can const do that @JvmField cannot?","code":"java\r\nclass Detail {\r\n  companion object {\r\n    const val COLOR = \"Blue\"\r\n    @JvmField val SIZE = \"Really Big\"\r\n  }\r\n}\r\n","options":[" `const` is compatible with Java, but `@JvmField` is not\r\n"," The compiler will inline const so it is faster and more memory efficient ([reference](https://kotlinlang.org/docs/java-to-kotlin-interop.html#static-fields))\r\n"," Virtually any type can be used with const but not `@JvmField`\r\n"," const can also be used with mutable types\r\n\r\n"],"correctAns":2},{"query":" Q38. You have a when expression for all of the subclasses of the class Attribute. To satisfy the when, you must include an else clause. Unfortunately, whenever a new subclass is added, it returns unknown. You would prefer to remove the else clause so the compiler generates an error for unknown subtypes. What is one simple thing you can do to achieve this?","code":"kotlin\r\nopen class Attribute\r\nclass Href: Attribute()\r\nclass Src: Attribute()\r\nclass Alt: Attribute()\r\n\r\nfun getAttribute(attribute: Attribute) : String {\r\n  return when (attribute) {\r\n    is Href -> \"href\"\r\n    is Alt -> \"alt\"\r\n    is Src -> \"src\"\r\n    else -> \"unknown\"\r\n  }\r\n}\r\n","options":[" Replace `open` with `closed`\r\n"," Replace `open` with `sealed` ([reference](https://kotlinlang.org/docs/sealed-classes.html))\r\n"," Replace `open` with `private`\r\n"," Replace `open` with `public`\r\n\r\n"],"correctAns":2},{"query":" Q39. You would like to know each time a class property is updated. Which code snippet shows a built-in delegated property that can accomplish this?","options":[" `Delegates.watcher()`\r\n"," `Delegates.observable()` ([reference](https://kotlinlang.org/docs/delegated-properties.html#observable-properties))\r\n"," `Delegates.rx()`\r\n"," `Delegates.observer()`\r\n\r\n"],"correctAns":2},{"query":" Q40. Why doesn't this code compile?","code":"kotlin\r\nval addend = 1\r\ninfix fun Int.add(added: Int=1) = this + addend\r\nfun main(){\r\n  val msg = \"Hello\"\r\n  println( msg shouldMatch \"Hello\")\r\n  println( 10 multiply 5 + 2)\r\n  println( 10 add 5)\r\n}\r\n","options":[" infix function must be marked public\r\n"," In Kotlin, add is a keyword\r\n"," Extension functions use `it`, not `this`, as the default parameter name\r\n"," infix functions cannot have default values ([reference](https://kotlinlang.org/docs/functions.html#infix-notation))\r\n\r\n"],"correctAns":4},{"query":" Q41. What is the correct way to initialize a nullable variable?","options":[" `val name = null`\r\n"," `var name: String`\r\n"," `val name: String`\r\n"," `val name: String? = null`\r\n\r\n"],"correctAns":4},{"query":" Q42. Which line of code is a shorter, more idiomatic version of the displayed snippet?","code":"kotlin\r\nval len: Int = if (x != null) x.length else -1\r\n","options":[" `val len = x?.let{x.len} else {-1}`\r\n"," `val len = x!!.length ?: -1`\r\n"," `val len:Int = (x != null)? x.length : -1`\r\n"," `val len = x?.length ?: -1`\r\n\r\n"],"correctAns":4},{"query":" Q43. You are creating a Kotlin unit test library. What else should you add to make the following code compile without error?","code":"kotlin\r\nfun String.shouldEqual(value: String) = this == value\r\nfun main(){\r\n  val msg = \"test message\"\r\n  println(msg shouldEqual \"test message\")\r\n}\r\n","options":[" The extension function should be marked public\r\n"," Add the prefix operator to the shouldMatch extension function\r\n"," The code is not legal in Kotlin (should be `println(msg.shouldEqual(\"test message\"))`)\r\n"," Add the prefix infix to the shouldMatch extension function\r\n\r\n"],"correctAns":4},{"query":" Q44. What is the difference between the declarations of COLOR and SIZE?","code":"kotlin\r\nclass Record{\r\n  companion object {\r\n    const val COLOR = \"Red\"\r\n    val SIZE = \"Large\"\r\n  }\r\n}\r\n","options":[" Since `COLOR` and `SIZE` are both immutable, they are identical internally\r\n"," Both are immutable, but the use of the keyword const makes `COLOR` slower and less space efficient than `SIZE`\r\n"," const makes `COLOR` faster, but not compatible with Java. Without const, `SIZE` is still compatible with Java\r\n"," Both are immutable, but the use of the keyword const makes `COLOR` faster and more space efficient than `SIZE` ([reference](https://kotlinlang.org/docs/properties.html#compile-time-constants))\r\n\r\n"],"correctAns":4},{"query":" Q45. Why does not this code snippet compile?","code":"kotlin\r\nclass Cat (name: String) {\r\n  fun greet() { println(\"Hello ${this.name}\") }\r\n}\r\n\r\nfun main() {\r\n  val thunderCat = Cat(\"ThunderCat\")\r\n  thunderCat.greet()\r\n}\r\n","options":[" Because name is a class parameter, not a property-it is unresolved `main()`.\r\n"," In order to create an instance of a class, you need the keyword `new`\r\n"," The reference to name needs to be scoped to the class, so it should be `this.name`\r\n"," Classes cannot be immutable. You need to change `var` to `val`\r\n\r\n"],"correctAns":4},{"query":" Q46. The code below shows a typical way to show both index and value in many languages, including Kotlin. Which line of code shows a way to get both index and value more idiomatically?","code":"kotlin\r\nvar ndx = 0;\r\nfor (value in 1..5){\r\n  println(\"$ndx - $value\")\r\n  ndx++\r\n}\r\n","options":[" `for( (ndx, value) in (1..20).withIndex() ){` ([reference](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/with-index.html))\r\n"," `for( (ndx, value) in (1..20).pair() ){`\r\n"," `for( Pair(ndx, value) in 1..20 ){`\r\n"," `for( (ndx, value) in *(1..20) ){`\r\n\r\n"],"correctAns":1},{"query":" Q47. The Kotlin .. operator can be written as which function?","options":[" `a.from(b)`\r\n"," `a.range(b)`\r\n"," `a.rangeTo(b)` ([reference](https://kotlinlang.org/docs/ranges.html))\r\n"," `a.to(b)`\r\n\r\n"],"correctAns":3},{"query":" Q48. How can you retrieve the value of the property codeName without referring to it by name or destructuring?","code":"kotlin\r\ndata class Project(var codeName: String, var version: String)\r\nfun main(){\r\n  val proj = Project(\"Chilli Pepper\", \"2.1.0\")\r\n}\r\n","options":[" `proj.0`\r\n"," `proj[0]`\r\n"," `proj[1]`\r\n"," `proj.component1()` ([reference](https://kotlinlang.org/docs/destructuring-declarations.html))\r\n\r\n"],"correctAns":4},{"query":" Q49. This function generates Fibonacci sequence. Which function is missing?","code":"kotlin\r\nfun fibonacci() = sequence {\r\n  var params = Pair(0, 1)\r\n  while (true) {\r\n    ___(params.first)\r\n    params = Pair(params.second, params.first + params.second)\r\n  }\r\n}\r\n","options":[" `with()`\r\n"," `yield()` ([reference](https://kotlinlang.org/docs/sequences.html#from-chunks))\r\n"," `skip()`\r\n"," `return()`\r\n\r\n"],"correctAns":2},{"query":" Q50. In this code snippet, why does the compiler not allow the value of y to change?","code":"kotlin\r\nfor(y in 1..100) y+=2\r\n","options":[" `y` must be declared with `var` to be mutable\r\n"," `y` is an implicitly immutable value\r\n"," `y` can change only in a while loop\r\n"," In order to change `y`, it must be declared outside of the loop\r\n\r\n"],"correctAns":2}]