[{"query":" Q26. How do you reference class members from within a class?","options":[" self\r\n"," instance\r\n"," class\r\n"," this\r\n\r\n"],"correctAns":1},{"query":" Q27. All value types in Swift are **\\_** under the hood?","options":[" structs\r\n"," classes\r\n"," optionals\r\n"," generics\r\n\r\n"],"correctAns":1},{"query":" Q28. What is the correct way to add a value to this array?","code":"swift\r\nvar strings = [1, 2, 3]\r\n","options":[" all of these answers\r\n"," strings.append(4)\r\n"," strings.insert(5, at: 1)\r\n"," strings += [5]\r\n\r\n"],"correctAns":1},{"query":" Q29. How many times will this loop be executed?","code":"swift\r\nfor i in 0...100 {\r\n  print(i)\r\n}\r\n","options":[" 0\r\n"," 101\r\n"," 99\r\n"," 100\r\n\r\n"],"correctAns":2},{"query":" Q30. What can AnyObject represent?","options":[" an instance of any class\r\n"," an instance of function type\r\n"," all of these answers\r\n"," an instance of an optional type\r\n\r\n"],"correctAns":3},{"query":" Q31. What does this code print?","code":"swift\r\ntypealias Thing = [String:Any]\r\nvar stuff : Thing\r\nprint(type(of:stuff))\r\n","options":[" Dictionary\r\n"," ERROR\r\n"," Thing\r\n"," Dictionary<String, Any>\r\n\r\n"],"correctAns":4},{"query":" Q32. What is the value of t after this code is executed?","code":"swift\r\nlet names = [\"Larry\", \"Sven\", \"Bear\"]\r\nlet t = names.enumerated().first().offset\r\n","options":[" This code is invalid.\r\n"," This code does not compile.\r\n"," 0\r\n"," 1\r\n"," Larry\r\n\r\n"],"correctAns":2},{"query":" Q32. What is the value of test after this code executes?","code":"swift\r\nlet vt = (name: \"ABC\", val: 5)\r\nlet test = vt.0\r\n","options":[" ABC\r\n"," 0\r\n"," 5\r\n"," name\r\n\r\n"],"correctAns":1},{"query":" Q33. What is the base class in this code?","code":"swift\r\nclass LSN : MMM {\r\n}\r\n","options":[" MMM\r\n"," LSN\r\n"," There is no base class.\r\n"," This code is invalid.\r\n\r\n"],"correctAns":1},{"query":" Q34. What does this code print to the console?","code":"swift\r\nvar userLocation: String = \"Home\" {\r\n  willSet(newValue) {\r\n  print(\"About to set userLocation to \\(newValue)...\")\r\n  }\r\n\r\n  didSet {\r\n  if userLocation != oldValue {\r\n  print(\"userLocation updated with new value!\")\r\n  } else {\r\n  print(\"userLocation already set to that value...\")\r\n  }\r\n  }\r\n }\r\n\r\n userLocation = \"Work\"\r\n","options":[" About to set userLocation to Work… userLocation updated with new value!\r\n"," About to set userLocation to Work… userLocation already set to that value…\r\n"," About to set userLocation to Home… userLocation updated to new value!\r\n"," ERROR\r\n\r\n"],"correctAns":1},{"query":" Q35. What must a convenience initializer call?","options":[" a base class convenience initializer\r\n"," either a designated or another convenience initializer\r\n"," a designated initializer\r\n"," none of these answers\r\n\r\n"],"correctAns":3},{"query":" Q36. Which object allows you access to specify that a block of code runs in a background thread?","options":[" DispatchQueue.visible\r\n"," DispatchQueue.global\r\n"," errorExample need to be labeled as `throws`.\r\n"," DispatchQueue.background\r\n\r\n"],"correctAns":2},{"query":" Q37. What is the inferred type of x?","code":"swift\r\nlet x = [\"a\", \"b\", \"c\"]\r\n","options":[" `String[]`\r\n"," `Array<String>`\r\n"," `Set<String>`\r\n"," `Array<Character>`\r\n\r\n"],"correctAns":2},{"query":" Q38. What is the value of `oThings` after this code is executed?","code":"swift\r\nlet nThings: [Any] = [1, \"2\", \"three\"]\r\nlet oThings = nThings.reduce(\"\") { \"\\($0)\\($1)\" }\r\n","options":[" 11212three\r\n"," 115\r\n"," 12three\r\n"," Nothing, this code is invalid.\r\n\r\n"],"correctAns":3},{"query":" Q39. How would you call a function that throws errors and also returns a value?","options":[" `!try`\r\n"," `try?`\r\n"," `try!`\r\n"," `?try`\r\n\r\n"],"correctAns":2},{"query":" Q40. What is wrong with this code?","code":"swift\r\nprotocol TUI {\r\n  func add(x1 : Int, x2 : Int) -> Int {\r\n    return x1 + x2\r\n  }\r\n}\r\n","options":[" Protocol functions cannot have return types.\r\n"," Protocol functions cannot have implementations.\r\n"," Nothing is wrong with it.\r\n"," `add` is a reserved keyword.\r\n\r\n"],"correctAns":2},{"query":" Q41. In this code, what are `wheels` and `doors` examples of?","code":"swift\r\nclass Car {\r\n  var wheels: Int = 4\r\n  let doors = 4\r\n}\r\n","options":[" class members\r\n"," This code is invalid.\r\n"," class fields\r\n"," class properties\r\n\r\n"],"correctAns":4},{"query":" Q42. How do you designated a failable initializer?","options":[" You cannot\r\n"," deinit\r\n"," `init?`\r\n"," init\r\n\r\n"],"correctAns":3},{"query":" Q43. What is printed when this code is executed?","code":"swift\r\nlet dbl = Double.init(\"5a\")\r\nprint(dbl ?? \".asString()\")\r\n","options":[" five\r\n"," 5a\r\n"," `.asString()`\r\n"," 5\r\n\r\n"],"correctAns":3},{"query":" Q44. In the function below, what are `this` and `toThat` examples of?","code":"swift\r\nfunc add(this x: Int, toThat y: Int)->{}\r\n","options":[" none of these answers\r\n"," local terms\r\n"," argument labels\r\n"," parameters names\r\n\r\n"],"correctAns":3},{"query":" Q45. What is wrong with this code?","code":"swift\r\nfor (key, value) in [1: \"one\", 2: \"two\"]{\r\n  print(key, value)\r\n}\r\n","options":[" The interaction source is invalid\r\n"," The interaction variable is invalid\r\n"," There is nothing wrong with this code\r\n"," The comma in the print is misplaced\r\n\r\n"],"correctAns":3},{"query":" Q46. Which of these choices is associated with unit testing?","options":[" XCTest\r\n"," all of these answers\r\n"," @testable\r\n"," XCAssert\r\n\r\n"],"correctAns":2},{"query":" Q47. In the code below, what is width an example of?","code":"swift\r\nclass Square{\r\n  var height: Int = 0\r\n  var width : Int {\r\n    return height\r\n  }\r\n}\r\n","options":[" This code contains error\r\n"," a closure\r\n"," a computed property\r\n"," lazy loading\r\n\r\n"],"correctAns":3},{"query":" Q48. What data type is this an example of?","code":"swift\r\nlet vals = (\"val\", 1)\r\n","options":[" a dictionary\r\n"," a tuple\r\n"," an optional\r\n"," This code contains error\r\n\r\n"],"correctAns":2},{"query":" Q49. What is wrong with this code?","code":"swift\r\nvar x = 5\r\nx = 10.0\r\n","options":[" You cannot assign a Double to a variable of type Int\r\n"," x is undefined\r\n"," x is a constant\r\n"," x has no type\r\n\r\n"],"correctAns":1}]