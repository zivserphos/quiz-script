[{"query":" Q1. What is this code an example of?","code":"swift\r\nlet val = (Double)6\r\n","options":[" a syntax issue\r\n"," typecasting\r\n"," assignment\r\n"," initialization\r\n\r\n"],"correctAns":1},{"query":" Q2. What is the error in this code?","code":"swift\r\nlet x = 5\r\nguard x == 5 { return }\r\n","options":[" The guard is missing the else.\r\n"," Nothing is wrong.\r\n"," The guard is missing a then.\r\n"," The comparison is wrong.\r\n\r\n"],"correctAns":1},{"query":" Q3. What is the raw/underlying type of this enum?","code":"swift\r\nenum Direction {\r\n  case north, south, east, west\r\n}\r\n","options":[" There is none.\r\n"," String\r\n"," Any\r\n"," Int\r\n\r\n"],"correctAns":1},{"query":" Q4. Why is dispatchGroup used in certain situations?","options":[" It allows multiple synchronous or asynchronous operations to run on different queues.\r\n"," It allows track and control execution of multiple operations together.\r\n"," It allows operations to wait for each other as desired.\r\n"," all of these answers.\r\n\r\n"],"correctAns":4},{"query":" Q5. What is this code an example of?","code":"swift\r\nlet val = 5\r\nprint(\"value is: \\(val)\")\r\n","options":[" string interpolation\r\n"," string compilation\r\n"," method chaining\r\n"," string concatenation\r\n\r\n"],"correctAns":1},{"query":" Q6. What are the contents of `vals` after this code is executed?","code":"swift\r\nvar vals = [10, 2]\r\nvals.sort { (s1, s2) -> Bool in\r\n  s1 > s2\r\n}\r\n","options":[" [10, 2]\r\n"," [2, 10]\r\n"," nil\r\n"," This code contains an error\r\n\r\n"],"correctAns":1},{"query":" Q7. What does this code print?","code":"swift\r\ntypealias Thing = [String:Any]\r\nvar stuff: Thing\r\nprint(type(of: stuff))\r\n","options":[" Dictionary<String, Any>\r\n"," Dictionary\r\n"," ERROR\r\n"," Thing\r\n\r\n"],"correctAns":1},{"query":" Q8. What is the value of y?","code":"swift\r\nlet x = [\"1\", \"2\"].dropFirst()\r\nlet y = x[0]\r\n","options":[" This code contains an error\r\n"," 1\r\n"," 2\r\n"," nil\r\n\r\n"],"correctAns":1},{"query":" Q9. What is the value of test in this code?","code":"swift\r\nvar test = 1 == 1\r\n","options":[" TRUE\r\n"," YES\r\n"," 1\r\n"," This code contains an error\r\n\r\n"],"correctAns":1},{"query":" Q10. What is the value of y?","code":"swift\r\nvar x: Int?\r\nlet y = x ?? 5\r\n","options":[" 5\r\n"," 0\r\n"," nil\r\n"," This code contains an error\r\n\r\n"],"correctAns":1},{"query":" Q11. What is the type of this function?","code":"swift\r\nfunc add(a: Int, b: Int) -> Int { return a+b }\r\n","options":[" Int\r\n"," (Int, Int) -> Int\r\n"," Int<Optional>\r\n"," Functions don't have types.\r\n\r\n"],"correctAns":2},{"query":" Q12. What is the correct way to call this function?","code":"swift\r\nfunc myFunc(_ a: Int, b: Int) -> Int {\r\n  return a + b\r\n}\r\n","options":[" myFunc(5, b: 6)\r\n"," myFunc(5, 6)\r\n"," myFunc(a: 5, b: 6)\r\n"," myFunc(a, b)\r\n\r\n"],"correctAns":1},{"query":" Q13. The Codable protocol is **\\_**?","options":[" a combination of Encodable and Decodable\r\n"," not a true protocol <<<<---Possibly correct as it's a typealias of Encodable and Decodable\r\n"," required of all classes\r\n"," automatically included in all classes\r\n\r\n"],"correctAns":1},{"query":" Q14. What is the type of value1 in this code?","code":"swift\r\nlet value1 = \"\\(\"test\".count)\"\r\n","options":[" String\r\n"," Int\r\n"," null\r\n"," test.count\r\n\r\n"],"correctAns":1},{"query":" Q15. When a function takes a closure as a parameter, when do you want to mark is as escaping?","options":[" when it's executed after the function returns\r\n"," when it's scope is undefined\r\n"," when is's lazy loaded\r\n"," all of these answers\r\n\r\n"],"correctAns":1},{"query":" Q16. What's wrong with this code?","code":"swift\r\nclass Person {\r\n  var name: String\r\n  var address: String\r\n}\r\n","options":[" Person has no initializers.\r\n"," Person has no base class.\r\n"," var name is not formatted corrrectly.\r\n"," address is a keyword.\r\n\r\n"],"correctAns":1},{"query":" Q17. What is the value of names after this code is executed?","code":"swift\r\nlet names = [\"Bear\", \"Joe\", \"Clark\"]\r\nnames.map { (s) -> String in\r\n  return s.uppercased()\r\n}\r\n","options":[" [\"BEAR\", \"JOE\", \"CLARK\"]\r\n"," [\"B\", \"J\", \"C\"]\r\n"," [\"Bear\", \"Joe\", \"Clark\"]\r\n"," This code contains an error.\r\n\r\n"],"correctAns":3},{"query":" Q18. What describes this line of code?","code":"swift\r\nlet val = 5\r\n","options":[" a constant named val of type Int\r\n"," a variable named val of type item\r\n"," a constant named val of type Number\r\n"," a variable named val of type Int\r\n\r\n"],"correctAns":1},{"query":" Q19. What is the error in this code?","code":"swift\r\nextension String {\r\n  var firstLetter: Character = \"c\" {\r\n    didSet {\r\n      print(\"new value\")\r\n    }\r\n  }\r\n}\r\n","options":[" Extensions can't add properties. // although extensions technically can't contain stored properties\r\n"," Nothing is wrong with it.\r\n"," didSet takes a parameter.\r\n"," c is not a character.\r\n\r\n"],"correctAns":1},{"query":" Q20. didSet and willSet are examples of **\\_**?","options":[" property observers\r\n"," key properties\r\n"," all of these answers\r\n"," newOld value calls\r\n\r\n"],"correctAns":1},{"query":" Q21. What is wrong with this code?","code":"swift\r\nself.callback = {\r\n  self.attempts += 1\r\n  self.downloadFailed()\r\n}\r\n","options":[" Use of self inside the closure causes retain cycle.\r\n"," You cannot assign a value to closure in this manner.\r\n"," You need to define the type of closure explicitly.\r\n"," There is nothing wrong with this code.\r\n\r\n"],"correctAns":1},{"query":" Q22. How many values does vals have after this code is executed?","code":"swift\r\nvar vals = Set<String> = [\"4\", \"5\", \"6\"]\r\nvals.insert(\"5\")\r\n","options":[" three\r\n"," four\r\n"," eight\r\n"," This code contains an error.\r\n\r\n"],"correctAns":1},{"query":" Q23. How can you avoid a strong reference cycle in a closure?","options":[" Use a capture list to set class instances of weak or unowned.\r\n"," You can't, there will always be a danger of strong reference cycles inside a closure.\r\n"," Initialize the closure as read-only.\r\n"," Declare the closure variable as lazy.\r\n\r\n"],"correctAns":1},{"query":" Q24. What is wrong with this code?","code":"swift\r\nif let s = String.init(\"some string\") {\r\n  print(s)\r\n}\r\n","options":[" This String initializer does not return an optional.\r\n"," String does not have an initializer that can take a String.\r\n"," = is not a comparison.\r\n"," Nothing is wrong with this code.\r\n\r\n"],"correctAns":1},{"query":" Q25. Which code snippet correctly creates a typealias closure?","options":[" typealias CustomClosure: () -> ()\r\n"," typealias CustomClosure { () -> () }\r\n"," typealias CustomClosure -> () -> ()\r\n"," typealias CustomClosure -> () {}\r\n\r\n"],"correctAns":1}]