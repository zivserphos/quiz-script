[{"query":" Q48. What is a reference to an object?","options":[" It is the address of variable only -- not the method of an object.\r\n"," It is a shallow pointer that contains address of an object.\r\n"," It is the physical address of an object.\r\n"," It is the address where the variables and methods of an object are stored.\r\n\r\n"],"correctAns":4},{"query":" Q49. Why is unit testing harder in OOP than functional programming?","options":[" Objects may maintain internal state, which is not easily accessible by the tests.\r\n"," The quality of unit testing frameworks for functional languages is better.\r\n"," OOP promotes code reuse, which means that your tests have to consider more use cases.\r\n"," Object-oriented languages tend to rely on frameworks such as Spring or Hibernate, which make them difficult to test.\r\n\r\n"],"correctAns":1},{"query":" Q50. What is the function of a user diagram?","options":[" It connects actors to use cases.\r\n"," It links actors to roles played in all use cases.\r\n"," It lists all actors for each use case.\r\n"," It minimizes the number of actors required.\r\n\r\n"],"correctAns":2},{"query":" Q51. How do object behaviour and attributes differ?","options":[" Behaviour describe dynamic properties; attributes are static.\r\n"," Attributes describe a state; behaviours describe a change.\r\n"," Attributes apply only to a specified object; behaviour apply to other linked objects.\r\n"," Behaviours are vector quantities; attributes are scalars.\r\n\r\n"],"correctAns":2},{"query":" Q52. The open/closed principle states that classes should be open for \\_ but closed for \\_.","options":[" refactoring; duplication\r\n"," modification; duplication\r\n"," extension; modification\r\n"," reuse; encapsulation\r\n\r\n"],"correctAns":3},{"query":" Q53. Why would you override a method of a base class?","options":[" to define a method that must be implemented in a derived class\r\n"," to define a custom implementation of an inherited member\r\n"," to define a method that must be implemented in a superclass only\r\n"," to define a class that can be inherited from\r\n\r\n"],"correctAns":2},{"query":" Q54. What is a copy constructor?","options":[" It is a unique constructor for creating a new object as a copy of an object that already exists. There will always be only one copy constructor that can be either defined by the user or the system.\r\n"," It is a constructor that duplicates itself when requested on demand.\r\n"," It is a common constructor for preventing the creation of a new object as a copy of an object that already exists. There will always be multiple standard constructors that can be either defined by the user or the system.\r\n"," It is a constructor that duplicates itself on its own, based on memory available.\r\n\r\n"],"correctAns":1},{"query":" Q55. What defines the catch block most accurately?","options":[" The catch block that will be executed is the one that best matches the type of exception thrown.\r\n"," Multiple catch blocks can never be associated with a single try block.\r\n"," Multiple catch blocks are mandatory for each try block.\r\n"," Multiple catch blocks will all be executed in the case of an exception.\r\n\r\n"],"correctAns":1},{"query":" Q56. There are five classes. Class E is derived from class D, D from C, C from B, and B from A. Which class constructor(s) will be called first if the object of E or D is created?","options":[" A\r\n"," B\r\n"," C\r\n"," C and B\r\n\r\n"],"correctAns":1},{"query":" Q57. You have modules that are dependent on each other. If you change one module, you have to make changes in the dependent modules. What term is used to describe this problem, and what is a potential solution?","options":[" Cohesion. A solution is to show that each module has certain responsibilities and to use an anticohesive design pattern.\r\n"," Encapsulation. A solution is to implement one of the SOLID principles to ensure the modules do not encapsulate with each other.\r\n"," Coupling. A solution is to refactor the code to be loosely coupled by using inversion of control and dependency injection.\r\n"," Dependency. A solution is to implement polymorphism and abstraction to change and extract dependent elements of a module so that it functions on its own.\r\n\r\n"],"correctAns":3},{"query":" Q58. **\\_** describes an aggregation","options":[" A class of resources\r\n"," A group of methods\r\n"," A collection of objects\r\n"," A list of children\r\n\r\n"],"correctAns":3},{"query":" Q59. Which type of function can be used for polymorphism?","options":[" virtual function\r\n"," inline function\r\n"," undefined function\r\n"," private function\r\n\r\n"],"correctAns":1},{"query":" Q60. Which choice is a benefit of using dependency injection?","options":[" loose coupling\r\n"," code reusability\r\n"," lazy initialization\r\n"," data abstraction\r\n\r\n"],"correctAns":1},{"query":" Q61. Are you required to return an object if it was passed by reference to a function, and why or why not?","options":[" Yes, the caller function needs to reflect the changes.\r\n"," No, you should use a global variable instead.\r\n"," No, changes will be automatically reflected in the calling function.\r\n"," Yes, the object must be the same in the caller function.\r\n\r\n"],"correctAns":3},{"query":" Q63. What is the best example of a superclass and subclass relationship?","options":[" car:toyota\r\n"," ducks:pond\r\n"," toes:feet\r\n"," rock:stone\r\n\r\n"],"correctAns":1},{"query":" Q64. Which statements best describe the Gang of Four design patterns called Memento and Observer?","options":[" Memento notifies multiple classes of changes. Observer captures and restores an object's internal state.\r\n"," Memento defers the exact steps of an algorithm to a subclass. Observer defines a new operation to a class without change.\r\n"," Memento alters an object's behavior when its state changes. Observer encapsulates an algorithm inside a class.\r\n"," Memento captures and restores an object's internal state. Observer notifies multiple classes of changes.\r\n\r\n"],"correctAns":4},{"query":" Q65. What does the value (0.5,0.5,0.5) indicate in the class diagram specification position: Coordinate = (0.5,0.5,0.5)?","options":[" a default value of the Coordinate attribute\r\n"," the size of the position array\r\n"," an increment of the position attribute value\r\n"," a default value of the position attribute\r\n\r\n"],"correctAns":4},{"query":" Q66. What is the most accurate example of the Liskov substitution principle?","code":null,"options":["\r\n\r\n```\r\npublic class Car{\r\n}\r\npublic class FlyingCars extends Car{\r\n   public void fly(){}\r\n}\r\npublic class Tesla FlyingCar{}\r\npublic class Honda Car{}\r\n```\r\n\r\n","\r\n\r\n```\r\npublic class Car{\r\n   public void fly(){}\r\n}\r\npublic class Tesla extends Car{}\r\npublic class Honda extends Car{}\r\n```\r\n\r\n","\r\n\r\n```\r\npublic class Car{\r\npublic void fly(){}\r\n}\r\npublic class Tesla Car{}\r\npublic class Honda Car{}\r\n```\r\n\r\n","\r\n\r\n```\r\npublic class Car{\r\n}\r\npublic class FlyingCars extends Car{\r\n   public void fly(){}\r\n}\r\npublic class Tesla extends FlyingCar{}\r\npublic class Honda extends Car{}\r\n```\r\n\r\n[reference link](https://stackoverflow.com/a/44913313/1573267)\r\n\r\n"],"correctAns":4},{"query":" Q67. What is the difference between a parameter and an argument?","options":[" An argument can have many values while a parameter can have only one value.\r\n"," An argument is the variable used for input values in a method. A parameter is the specific input value passed to the method.\r\n"," A parameter is a variable in the declaration of a function. An argument is the value of this variable that gets passed to the function.\r\n"," Parameters and arguments are the same\r\n\r\n"],"correctAns":3},{"query":" Q68. What is the scope of a class nested inside another class?","options":[" Protected scope\r\n"," Private scope\r\n"," Global scope\r\n"," Depends on access specifier and inheritance used\r\n\r\n> Explanation: It depends on the access specifier and the type of inheritance used with the class, because if the class is inherited then the nested class can be used by subclass too, provided itâ€™s not of private type.\r\n\r\n"],"correctAns":4},{"query":" Q69. Methods and attributes that define an object are a kind of blueprint called what?","options":[" a collection\r\n"," a variable\r\n"," a class\r\n"," a procedure\r\n\r\n"],"correctAns":3},{"query":" Q70. Assume single inheritance is used with classes A and B while A is the base class. Then assume classes C, D, and E, where C is a base class and D is derived from C, then E is derived from D. Class C is made to inherit from class B. Which type of inheritance is reflected?","options":[" Multilevel\r\n"," Hybrid\r\n"," Single level\r\n"," Multiple\r\n\r\n"],"correctAns":1},{"query":" Q71. What is the main idea behind separation of concerns?","options":[" All of these answers\r\n"," Applications are decomposed into parts\r\n"," Parts are defined with minimal overlap\r\n"," Each part is responsible for a separate concern\r\n\r\n"],"correctAns":1},{"query":" Q72. What is the purpose of the finally block?","options":[" To always run the finally block of code when the try block exits\r\n"," To run code when an exception has not occurred\r\n"," To run the block if an exception occurred\r\n"," To run code whenever garbage collection requires it\r\n\r\n"],"correctAns":1},{"query":" Q73. Which choice is not an OOP language?","options":[" C#\r\n"," Java\r\n"," C\r\n"," Python\r\n\r\n"],"correctAns":3}]