[{"query":" Q24. What are the five Creational Design patterns by the Gang of Four ?","options":[" Observer, State, Strategy, Template Method, and Visitor.\r\n"," Composite, Visitor, State, Prototype, and Singleton.\r\n"," Composite, Builder, Factory Method, Prototype, and Singleton.\r\n"," Abstract Factory, Builder, Factory Method, Prototype, and Singleton.\r\n\r\n"],"correctAns":4},{"query":" Q25. In multilevel inheritance, one class inherits how many classes?","options":[" one class only\r\n"," two classes\r\n"," as many classes as required\r\n"," at least two classes\r\n\r\n"],"correctAns":1},{"query":" Q26. if an object is passed by reference, the changes made in the function are reflected \\_.","options":[" to the main object of the caller function, too\r\n"," on the caller function object and also the called function object\r\n"," on the copy of the object that is made during the pass\r\n"," only in the local scope of the called function\r\n\r\n"],"correctAns":1},{"query":" Q27. What is a method?","options":[" a set of instructions designed to perform a frequently used operation within a program and return no values\r\n"," the exact same thing as a function and subroutine\r\n"," a set of variables that can change over time\r\n"," a procedure associated with data and behaviour\r\n\r\n"],"correctAns":2},{"query":" Q28. A mobile phone is made up of components such as a motherboard, camera, and sensors. The motherboard represents all the functions of a phone, the display shows the display only, and the phone is represented as a whole. Which of the following has the highest level of abstraction?","options":[" camera\r\n"," display\r\n"," motherboard\r\n"," mobile phone\r\n\r\n"],"correctAns":4},{"query":" Q29. Which class has the highest degree of abstraction in a multilevel inheritance relationship of five levels?","options":[" the class at the third level\r\n"," the class at the first level\r\n"," All have the same degree of abstraction.\r\n"," the class at the second level\r\n\r\n"],"correctAns":2},{"query":" Q30. Which is NOT one of the basic types of inheritance?","options":[" multilevel inheritance\r\n"," double inheritance\r\n"," single inheritance\r\n"," hierarchical inheritance\r\n\r\n"],"correctAns":2},{"query":" Q31. Why is code duplication so insidious?","options":[" The duplication uses unnecessary space.\r\n"," One has to maintain all the duplicates.\r\n"," Duplication can cause intellectual property concerns.\r\n"," Duplication is easy to hide.\r\n\r\n"],"correctAns":2},{"query":" Q32. When and how often is a static constructor called?","options":[" It is called initially when an object is created and called with every new object instance.\r\n"," It is called when an object is destroyed and only one time.\r\n"," It is called initially when an object is created and only one time.\r\n"," It is created at time when the object is discarded.\r\n\r\n"],"correctAns":3},{"query":" Q33. What does the code shown below demonstrate, and why?","code":"cpp\r\n   static void Multiply(int num1, int num2) {};\r\n   static void Multiply(double num1, double num2, double num3) {};\r\n   static void Multiply(float num1, float num2) {};\r\n","options":[" polymorphism, because each method can perform different task\r\n"," method overriding, because it display the same method name, different or same parameters, and same return type\r\n"," method overloading, because it allows the creation of several methods with the same name, wich differ by the type of input via parameter\r\n"," method overriding, because it display the same method name, different parameters, and same return type\r\n\r\n"],"correctAns":3},{"query":" Q34. What is the purpose of static constructor?","options":[" to initialize all the members with static value\r\n"," to delete the static members when not required\r\n"," to initialize the static members of class\r\n"," to clear all the static members' initialized values\r\n\r\n"],"correctAns":1},{"query":" Q35. What are CRC Cards?","options":[" Code Responsibility Collection cards are a brainstorming tool used in the design of procedural software\r\n"," Class Responsibility collaboration cards are a brainstorming tool used in the design of oop software\r\n"," Code Responsibility Correction cards are tools used for debugging\r\n"," Code Responsibility Correction cards are tools for modeling\r\n\r\n[reference link](https://en.wikipedia.org/wiki/Class-responsibility-collaboration_card)\r\n\r\n"],"correctAns":2},{"query":" Q36.1 How are contents of a composition different from those of aggregation?","options":[" if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection\r\n"," if a composition dies, the contents die\r\n"," the contents of a composition are all siblings\r\n"," an aggregation contains only abstract classes\r\n\r\n"],"correctAns":2},{"query":" Q36.2 Which statement about compositions and aggregations is true?","options":[" if one element of an aggregation is dereferenced, all its elements are eligible for garbage collection\r\n"," if a composition dies, the contents die\r\n"," the contents of a composition are all siblings\r\n"," an aggregation contains only abstract classes\r\n\r\n"],"correctAns":2},{"query":" Q37. What is the result of using more abstraction?","options":[" it can increase code vulnerability\r\n"," it can make code unsafe\r\n"," it can limit code readability\r\n"," it can be safer for coding\r\n\r\n"],"correctAns":3},{"query":" Q38. Which is false for a member function of a class?","options":[" Member functions can be defined only inside or outside the class body.\r\n"," Member functions can be made to be friends of another class.\r\n"," Member functions do not need to be declared inside the class definition.\r\n"," All member functions need to be defined.\r\n\r\n"],"correctAns":3},{"query":" Q39. Why is inheritance used when creating a new class?","options":[" to protect attributes from unwanted changes\r\n"," to delegate coding responsibility more efficiently\r\n"," to conserve memory\r\n"," to avoid writing duplicate code\r\n"," to separate class behavior from the more general\r\n\r\n_NOTE_: I don't have 4th variant in my test, it changed to new 5th variant. Is it also true?\r\n\r\n"],"correctAns":5},{"query":" Q40. In addition to attributes and behaviours, what quality must a class possess?","options":[" a name\r\n"," a state\r\n"," a color\r\n"," an object\r\n\r\n"],"correctAns":1},{"query":" Q41. Which type of function among the following shows polymorphism?","options":[" inline function\r\n"," undefined function\r\n"," virtual function\r\n"," class member function\r\n\r\n"],"correctAns":3},{"query":" Q42. Which words in the following list are candidates for objects: trumpet, clean, enrage, leaf, tree, collapse, active, and lively?","options":[" leaf and tree\r\n"," clean, enrage, and collapse\r\n"," clean, active, and lively\r\n"," leaf, tree, and trumpet\r\n\r\n"],"correctAns":4},{"query":" Q43. What best describes what object-oriented programming does?","options":[" It focuses on objects that interact cleanly with one another.\r\n"," It programs exclusively to interfaces.\r\n"," It programs exclusively to classes.\r\n"," It creates one class for all business logic.\r\n\r\n"],"correctAns":1},{"query":" Q44. Can abstract classes be used in multilevel inheritance?","options":[" No, abstract classes can be used only in single-level inheritance since they must be immediately implemented.\r\n"," yes, always\r\n"," yes, but with only one abstract class\r\n"," No, abstract classes do not have constructors.\r\n\r\n"],"correctAns":2},{"query":" Q45. What type of inheritance may lead to the diamond problem?","options":[" single level\r\n"," multilevel\r\n"," hierarchical\r\n"," multiple\r\n\r\n"],"correctAns":4},{"query":" Q46. What is the relationship between abstraction and encapsulation?","options":[" Abstraction is about making relevant information visible, while encapsulation enables a programmer to implement the desired level of abstraction.\r\n"," Abstraction and encapsulation are essentially the same.\r\n"," Abstraction and encapsulation are unrelated.\r\n"," Encapsulation is about making relevant information visible, while abstraction enables a programmer to implement the desired level of encapsulation.\r\n\r\n"],"correctAns":1},{"query":" Q47. Which of these keywords are access specifiers?","options":[" abstract and public\r\n"," public and private\r\n"," this and final\r\n"," final and abstract\r\n\r\n"],"correctAns":2}]