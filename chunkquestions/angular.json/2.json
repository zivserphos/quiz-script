[{"query":" Q26. How does the built-in `ngIf` structural directive change the rendered DOM based on this template syntax?","code":"javascript\r\n@Component({\r\n  selector: 'app-product',\r\n  template: '<div *ngIf=\"product\">{{ product.name }}</div>',\r\n})\r\nexport class ProductComponent {\r\n  @Input() product;\r\n}\r\n","options":[" The `<div>` acts as a placeholder. If the product class field is \"truthy,\" the `<div>` will get replaced by just the `product.name` value; if not, then nothing will get rendered.\r\n"," The `<div>` will always be rendered, and if the product field is \"truthy,\" the `<div>` element will contain the `product.name` value; otherwise it will render the `<div>` element with no value in it.\r\n"," It produces an error, since ngIf is not a built-in structural directive.\r\n"," If the product class field is \"truthy,\" then the rendered DOM will include the `<div>` with the value of the `product.name` field. If it is not \"truthy,' the rendered DOM will not contain the `<div>` element.\r\n\r\n"],"correctAns":4},{"query":" Q27. What does this code accomplish?","code":"javascript\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n","options":[" It executes a unit test for an NgModule.\r\n"," It provides a way to code the document structure of an Angular application. The @NgModule is a form of inline code commenting that gets ignored by the TypeScript compiler but will show up with special formatting in code editor applications.\r\n"," It declares an Angular module named AppModule and makes it available for lazy loading throughout the application.\r\n"," It declares an Angular module named AppModule that contains a bootstrapped component named AppComponent. Then it registers that module with Angular, so the app can start up.\r\n\r\n"],"correctAns":4},{"query":" Q28. Which choice best describes what the _resolve_ property does in this route configuration?","code":"javascript\r\n{\r\n   path: ':id',\r\n   component: UserComponent,\r\n   resolve: {\r\n     user: UserResolverService\r\n   }\r\n}\r\n","options":[" Prior to loading the _UserComponent_, the router will subscribe to the _Observable_ returned by a _resolve_ method in the _UserResolverService_. This technique can be used to get preloaded data for a _route_.\r\n"," After the _route_ is done resolving, and the component is loaded and rendered, the _UserResolverService_ will have a method named _user_ run that will clean up any open data connections.\r\n"," There is an error. The correct property name is _onResolve_.\r\n"," The _UserComponent_ will have a parameter in its constructor for _user_, and the _router_ will handle injecting in a value for that from a call to a _user_ method in the _UserResolverService_.\r\n\r\n"],"correctAns":1},{"query":" Q29. What is the purpose of the ContentChildren decorator in this component class?","code":"javascript\r\n@Component({\r\n . . .\r\n template: '<ng-content></ng-content›'\r\n})\r\nexport class TabsListComponent {\r\n @ContentChildren(TabComponent) tabs;\r\n}\r\n","options":[" If any _TabsComponent_ elements are added to the _TabsListComponent_ template, they will get put into the <ng-content> element at runtime.\r\n"," It creates _TabComponent_ components in the _TabsListComponent_ template when a _TabsListComponent_ is instantiated.\r\n"," It provides access from within the component class to any _TabComponent_ components that were content projected into the <ng-content> for this component.\r\n"," It restricts the allowed elements that can be put into a _TabsListComponent_ element to allow only _TabComponent_ elements.\r\n\r\n"],"correctAns":3},{"query":" Q30. In order for Angular to process components in an application, where do the component types need to be registered?","options":[" within a script tag in the index.html file\r\n"," in an NgModule decorator metadata tag named _components_\r\n"," No registration is needed simply include the component files in an app directory.\r\n"," in an NgModule decorator metadata property named _declarations_\r\n\r\n"],"correctAns":4},{"query":" Q31. What is the purpose of the `fixture.detectChanges()` call in this unit test?","code":"javascript\r\nTestBed.configureTestingModule({\r\n  declarations: [UserCardComponent],\r\n});\r\nlet fixture = TestBed.createComponent(UserCardComponent);\r\n\r\nfixture.detectChanges();\r\n\r\nexpect(fixture.nativeElement.querySelector('h1').textContent).toContain(\r\n  fixture.componentInstance.title,\r\n);\r\n","options":[" It tracks any potential Ul changes and will fail the unit test if any are made.\r\n"," It is used to ensure component template stability across multiple unit tests in the entire test suite.\r\n"," It forces Angular to perform change detection, which will render the _UserCardComponent_ before you can validate its template.\r\n"," It is used to log change-detection events to the console during unit test runs.\r\n\r\n"],"correctAns":3},{"query":" Q32. What will the URL segment look like based on the following call to the `Router.navigate` method when goToUser is passed the value 15?","code":"javascript\r\nexport class ToolsComponent {\r\n constructor (private router: Router) { }\r\n goToUser (id: number) {\r\n   this.router.navigate(['user', id]);\r\n }\r\n}\r\n","options":[" /user/15\r\n"," /user?id=15\r\n"," /user:15\r\n"," /user;id=15\r\n\r\n"],"correctAns":1},{"query":" Q33. When a service is provided for root and is also added to the provider's configuration for a lazy-loaded module, what instance of that service does the injector provide to constructors in the lazy-loaded module?","options":[" A new instance of that service is created when the module is lazy loaded.\r\n"," Providing a service of the same type at a lazy-loaded module level is not allowed.\r\n"," If an instance of the service has not been created at the root level yet. it will create one there and then use it.\r\n"," A single instance of that service is always instantiated at root and is the only one ever used, including within lazy modules.\r\n\r\n"],"correctAns":1},{"query":" Q34. What is the HostBinding decorator doing in this directive?","code":"javascript\r\n@Directive({\r\n  selector: ' [appHighlight] ',\r\n})\r\nexport class HighlightDirective {\r\n  @HostBinding('class.highlighted') highlight = true;\r\n}\r\n","options":[" It is adding the CSS class named highlighted to any DOM element that has the appHighlight directive on it.\r\n"," HostBinding does not do anything on directives, only on components.\r\n"," It is specifying if the host element gets the highlighted class added to its class attribute, then the directive class field highlight will get set to\r\n      true; and if it is not added on the host it will get set to false.\r\n"," It is creating an inline style on the host element with a CSS property named highlight set to true.\r\n\r\n"],"correctAns":1},{"query":" Q35. In reactive forms, what Angular form class type is used on the native DOM <form> element to wire it up?","options":[" `FormArray`\r\n"," `FormControl`\r\n"," `FormGroup`\r\n"," `all of these answers`\r\n\r\n"],"correctAns":3},{"query":" Q36. Assuming the username FormControl has been configured with a minLength validator, how can you set up an error display in the following reactive","code":"html\r\n<form [formGroup]=\"form\"›\r\n  <input type=\"text\" formControlName= \"username\"›\r\n  ...\r\n</form>\r\n","options":["\r\n\r\n```javascript\r\n    <span *ngIf=\"username.minLength.invalid\"›\r\n        Username length is not valid\r\n    </span>\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n<input type=\"text\" formControlName=\"username\" [showMinLength]=\"true\"›\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n    <span *ngIf=\"form.get('username').getError('minLength') as minLengthError\">\r\n      Username must be at least {{ minLengthError.requiredLength }} characters.\r\n    </span>\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n<input type=\"text\" formControlName=\"username\" #userName=\"ngModer\">\r\n    <span *ngIf=\"userName.errors.minlength\"›\r\n      Username must be at least {{ userName.errors.minlength.requiredLength }} characters.\r\n    </span>\r\n```\r\n\r\n"],"correctAns":4},{"query":" Q37. How does the emulated view encapsulation mode handle CSS for a component?","options":[" It renders the CSS exactly how you wrote it without any changes.\r\n"," It makes use of shadow DOM markup and CSS.\r\n"," It creates unique attributes for DOM elements and scopes the CSS selectors you write to those attribute ids.\r\n"," It renders all of the CSS rules you write as inline CSS on all of the DOM elements you use them on in the template.\r\n\r\n"],"correctAns":3},{"query":" Q38. With the following TestBed setup, what can be used to access the rendered DOM for the UserCardComponent?","code":"javascript\r\nTestBed.configureTestingModule({\r\n  declarations: [UserCardComponent],\r\n});\r\nlet fixture = TestBed.createComponent(UserCardComponent);\r\n","options":[" `fixture.componentTemplate`\r\n"," `fixture.getComponentHtml()`\r\n"," `fixture.nativeElement`\r\n"," `fixture.componentInstance.template `\r\n\r\n"],"correctAns":3},{"query":" Q39. Given these two components, what will get rendered to the DOM based on the markup usage?","code":"javascript\r\n@Component({\r\n selector: 'app-card',\r\n template: '<h1>Data Card</h1><ng-content></ng-content>'\r\n})\r\nexport class CardComponent { }\r\n\r\n@Component({\r\n selector: 'app-bio',\r\n template: '<ng-content></ng-content>.\r\n})\r\nexport class BioComponent { }\r\n\r\n// markup usage:\r\n<app-card><app-bio>Been around for four years.</app-bio></app-card>\r\n","options":["\r\n\r\n```javascript\r\n <app-card>\r\n  <h1>Data Card</hl>\r\n  <app-bio>\r\n   Been around for four years.\r\n  </app-bio>\r\n </app-card>\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n<h1>Data Card</h1>\r\n <app-bio>\r\n  Been around for four years.\r\n </app-bio>\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n<app-card>\r\n  <h1>Data Card</hl>\r\n  <ng-content></ng-content>\r\n  <app-bio>\r\n   Been around for four years.\r\n   <ng-content></ng-content>\r\n  </app-bio>\r\n</app-card>\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n<app-card>\r\n  <h1>Data Card</hl>\r\n</app-card>\r\n```\r\n\r\n"],"correctAns":1},{"query":" Q40. Given the app-title-card component in the code below, what DOM will the app-user-card component render?","code":"javascript\r\n@Component({\r\n   selector: 'app-user-card',\r\n   template: '<app-title-card></app-title-card><p>3enny Smith</p>'\r\n})\r\n\r\n@Component({\r\n   selector: 'app-title-card',\r\n   template: '<h1>User Data</hl>'\r\n})\r\n\r\n// usage of user card component in parent component html\r\n<app-user-card></app-user-card>\r\n","options":["\r\n\r\n```javascript\r\n<app-user-card>\r\n  <app-title-card>\r\n    <h1>User Data</h1>\r\n  </app-title-card>\r\n  <p>genny Smith</p>\r\n</app-user-card>\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n<h1>User Data</h1>\r\n<p>Jenny Smith<p>\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n<app-user-card>\r\n  <app-title-card></app-title-card>\r\n</app-user-card>\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n<div app-user-card>\r\n  <h1 app-title-card>User Data</h1>\r\n  <p>Jenny Smith</p>\r\n</div>\r\n```\r\n\r\n"],"correctAns":1},{"query":" Q41. Pick the matching code for the custom provider registration that the @Inject () decorator is looking for:","code":"javascript\r\nconstructor(@Inject('Logger') private logger) { }\r\n","options":["\r\n\r\n```javascript\r\nproviders: [Logger];\r\n```\r\n\r\n","\r\n\r\n```javascript\r\nproviders: [{ provide: 'Logger', useClass: Logger }];\r\n```\r\n\r\n","\r\n\r\n```javascript\r\n@Injectable({\r\n    providedln: 'root'\r\n})\r\n```\r\n\r\n","\r\n\r\n```javascript\r\nproviders: [{ provide: 'Logger' }];\r\n```\r\n\r\nReferences [StackOverflow](https://stackoverflow.com/a/37315355) | [TektutorialHub](https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/) | [Angular.io - Dependency Injection In Action](https://angular.io/guide/dependency-injection-in-action#supply-a-custom-provider-with-inject)\r\n\r\n"],"correctAns":2},{"query":" Q42. Which choice best describes the following usage of the HttpClient . get method in the getsettings class method?","code":"javascript\r\nexport class SettingsService {\r\n    constructor(private httpClient: HttpClient) { }\r\n    ...\r\n\r\ngetSettings()\r\n{\r\n    return this.httpClient.get < Settings > (this.settingsUrl)\r\n        .pipe(\r\n            retry(3)\r\n        );\r\n}}\r\n","options":[" The RxJs pipe method is an alias for the subscribe method, so a call to `getSettings` will execute the get query. The retry operator is used to tell the pipe call to retry the get query three times.\r\n"," It will produce an error at runtime because the pipe method is not available off of the `Httpclient.get` call.\r\n"," Every single call to the getSettings method will result in the Httpclient making three total get requests to the settingsUrl, which is not ideal because there will always be two extra calls that are not needed. The retry operator should not be used in this manner.\r\n"," When the result of the getSettings method is subscribed to, the HTTP GET call will be made; if it fails, it will be retried up to three times before it gives up and returns an error.\r\n\r\nReference [learnrxjs.io](https://www.learnrxjs.io/learn-rxjs/operators/error_handling/retry) | [dev.to](https://dev.to/gparlakov/how-does-rxjs-retry-work-412p)\r\n\r\n"],"correctAns":4},{"query":" Q43. When a service requires some setup to initialize its default state through a method, how can you make sure that said method is invoked before the service gets injected anywhere?","options":[" Put the logic of that service method into the service constructor instead.\r\n"," Use a factory provider at the root AppModule level that depends on the service to call that service method.\r\n"," it is not possible to do it at application start; you can do it only at a component level.\r\n"," Instantiate an instance of the service at the global level (window scope) and then call that method.\r\n\r\n"],"correctAns":2},{"query":" Q44. What statement best describes this usage of the TestBed?","code":"javascript\r\nconst spy = jasmine.createSpyObj('DataService', ['getUsersFromApi']);\r\nTestBed.configureTestingModule({\r\n  providers: [UserService, { provide: DataService, useValue: spy }],\r\n});\r\nconst userService = TestBed.get(UserService);\r\n","options":[" The TestBed is required anytime you want to make use of a spy object in a unit test for an Angular provider.\r\n"," The TestBed is being used to test a component's view.\r\n"," The TestBed scaffolds an NgModule with two providers and handles any dependeny injection. If any Angular class requests the DataService in its constructor, the TestBed will inject spy in that constructor.\r\n"," The TestBed is configuring the test runner to tell it to only execute tests for the two providers listed in its providers array.\r\n- `All other tests be ignored, including tests that assert results against one of these providers and a non-defined provider.`\r\n  `Although it will work when multiple providers in this configuration are asserted against in a single test.`\r\n\r\n"],"correctAns":3},{"query":" Q45. What is the primary difference between a component and a directive?","options":[" A component uses a selector metadata property and a directive does not.\r\n"," A directive can be used for adding custom events to the DOM and a component cannot.\r\n"," A component has a template and a directive does not.\r\n"," A directive can target only native DOM elements.\r\n\r\n"],"correctAns":3},{"query":" Q46. What could you add to this directive class to allow the truncate length to be set during directive usage in markup?","code":"\r\n@Directive({\r\n    selector: '[appTruncate]'\r\n})\r\nexport class TruncateDirective {\r\n    . . .\r\n}\r\n\r\n// example of desired usage:\r\n<p [appTruncate]=\"10\">Some very long text here</p>\r\n","options":[" `@Input() appTruncate: number;`\r\n"," `@Output() appTruncate;`\r\n"," `constructor(maxLength: number) { }`\r\n"," `Nothing. The directive selector cannot be used to pass in values to the directive.`\r\n\r\nReference [Angular.io](https://angular.io/guide/attribute-directives#passing-values-into-an-attribute-directive) | [StackOverflow](https://stackoverflow.com/a/46303049)\r\n\r\n"],"correctAns":1},{"query":" Q48. Assuming the `DataService` has been registered in the providers for the application, which answer best describes what happens based on this component's constructor?","code":"\r\n@Component({\r\n    ...\r\n})\r\nexport class OrderHistoryComponent {\r\n    constructor(private dataService: DataService) {}\r\n    ...\r\n}\r\n","options":[" It is declaring that the `OrderHistoryComponent` will have its own version of a `DataService` and that it should never use any existing instances. The `DataService` would need to be instantiated within the class as a private field for this code to be complete and working.\r\n"," When Angular creates a new instance of the `OrderHistoryComponent`, the injector will provide an instance of a `DataService` class to the component constructor's first argument. The constructor's `dataService` parameter will be used to set a private instance field with the same name on the instance.\r\n"," It provides a way to do component testing only; the constructor has no usage in the actual run of the Angular application.\r\n"," It enables the custom element that the component targets to have a custom property named `dataService` that can be used to bind an existing `DataService` instance to.\r\n\r\nReference [StackOverflow](https://stackoverflow.com/a/49755822) | [Angular.io - Dependency Injection](https://angular.io/guide/dependency-injection)\r\n\r\n"],"correctAns":2},{"query":" Q49. Finish this markup using the `ngIf` directive to implement an else case that will display the text \"User is not active\":","code":"angular2html\r\n<div *ngIf=\"userIsActive; else inactive\">\r\n  Currently active!\r\n</div>\r\n","options":["\r\n\r\n```angular2html\r\n<div #inactive>\r\n  User is not active.\r\n</div>\r\n```\r\n\r\n","\r\n\r\n```angular2html\r\n<div *ngIf=\"inactive\">\r\n  User is not active.\r\n</div>\r\n```\r\n\r\n","\r\n\r\n```angular2html\r\n<ng-template #else=\"inactive\">\r\n  <div>User is not active.</div>\r\n</ng-template>\r\n```\r\n\r\n","\r\n\r\n```angular2html\r\n<ng-template #inactive>\r\n  <div>User is not active.</div>\r\n</ng-template>\r\n```\r\n\r\n"],"correctAns":4},{"query":" Q50. What is the correct syntax for a route definition to lazy load a feature module?","code":null,"options":["\r\n\r\n```\r\n{\r\n    path: 'users',\r\n    lazy: './users/users.module#UsersModule'\r\n}\r\n```\r\n\r\n","\r\n\r\n```\r\n{\r\n    path: 'users',\r\n    loadChildren: () => import('./users/users.module').then(m => m.UserModule)\r\n}\r\n```\r\n\r\n","\r\n\r\n```\r\n{\r\n    path: 'users',\r\n    loadChildren: './users/users.module#UsersModule'\r\n}\r\n```\r\n\r\n","\r\n\r\n```\r\n{\r\n    path: 'users',\r\n    module: UsersModule\r\n}\r\n```\r\n\r\n"],"correctAns":2},{"query":" Q51. Describe how the validation is set up and configured in this reactive forms example:","code":"\r\nexport class UserFormControl implements OnInit {\r\n    ...\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            username: this.formBuilder.control('',\r\n                [Validators.required, Validators.minLength(5), this.unique]),\r\n        )};\r\n    }\r\n    unique(control: FormControl) {\r\n        return control.value !== 'admin' ? null: {notUnique: true};\r\n    }\r\n}\r\n","options":[" The `FormControl` for `username` is getting configured to exclude three validators from the validators that it is allowed to use.\r\n"," The `FormControl` for `username` is getting configured to allow three possible validators to be used: `required, maxLength`, and a custom one named `unique`. To enable these `validators`, a validator directive would need to be put on the form fields in the markup.\r\n"," Validation cannot be set up this way in reactive forms.\r\n"," The `FormControl` for `username` is getting configured with three validators: the `required` and `minLength` validators that come from Angular, and a custom validator function named `unique` that checks for the value not equal to the string `admin`.\r\n\r\nReference [Angular.io - Form Validation](https://angular.io/guide/form-validation) | [Angular University Blog](https://blog.angular-university.io/angular-custom-validators/)\r\n\r\n"],"correctAns":4}]