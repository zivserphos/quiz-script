[{"query":" Q52. What does the Injectable decorator do on this service class?","code":"\r\n@Injectable({\r\n    providedIn: 'root'\r\n)}\r\nexport class DataService { }\r\n","options":[" It registers a provider for the service that is available only at the root module level, not to any children modules.\r\n"," It registers a provider for the service in the root application injector, making a single instance of it available throughout the application.\r\n"," It makes it so the service can be injected only in the bootstrapped component for the application.\r\n"," It sets up a compile time rule that allows you to put the service type only in the providers metadata property of the root NgModule.\r\n\r\n"],"correctAns":2},{"query":" Q56. What is the `async` pipe doing in this example?","code":"ts\r\n@Component({\r\n  selector: 'app-users',\r\n  template: '<div *ngFor=\"let user of users | async\">{{ user.name }}</div>',\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  users;\r\n  constructor(private httpClient: HttpClient) {}\r\n  ngOnInit(): void {\r\n    this.users = this.httpClient.get<{ name: string }>('users');\r\n  }\r\n}\r\n","options":[" It is doing nothing, since the async pipe cannot be used in an `ngFor` statement.\r\n"," It is configuring the `ngFor` iteration to support multiple lists of users at the same time.\r\n"," It is subscribing to the observable returned from the `HttpClient.get` method and unwrapping the returned value so it can be iterated over in the `ngFor`.\r\n"," It is allowing all of the users in the `users` field to be rendered concurrently to the DOM.\r\n"],"correctAns":3}]