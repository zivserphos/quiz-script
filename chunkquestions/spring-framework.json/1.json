[{"query":" Q1. How filters are used in Spring Web?","options":[" Filters are called before a request hits the DispatcherServlet. They allow for interception-style, chained processing of web requests for security, timeouts, and other purposes.\r\n"," Filters are used with a checksum algorithm that will filter invalid bytes out of a byte stream request body and allow for processing of HTTP requests from the DispatcherRequestServlet.\r\n"," Filters are used with a checksum algorithm that will filter invalid bytes out of an octet stream a multipart upload and allow for chained processing of WebDispatcherServlet requests.\r\n"," Filters are used to validate request parameters out of the byte stream request body and allow for processing of requests from the DispatcherRequestServlet.\r\n\r\nReference: [HandlerInterceptors vs. Filters in Spring MVC](https://www.baeldung.com/spring-mvc-handlerinterceptor-vs-filter). Also there is no such thing as DispatcherRequestServlet in Spring.\r\n\r\n"],"correctAns":1},{"query":" Q2. How is a resource defined in the context of a REST service?","options":[" A resource is the actual String literal that composes a URI that is accessed on a RESTful web service.\r\n"," It is an abstract concept that represents a typed object, data, relationships, and a set of methods that operate on it that is accessed via a URI.\r\n"," A REST service has a pool of resources composed of allocations of memory that allow a request to be processed.\r\n"," A resource for a REST service is an explicit allocation of a thread or CPU cycles to allow a request to be processed.\r\n\r\n"],"correctAns":2},{"query":" Q3. Which of these is a valid Advice annotation?","options":[" @AfterError\r\n"," @AfterReturning\r\n"," @AfterException\r\n"," @AfterExecution\r\n\r\n"],"correctAns":2},{"query":" Q4. What does a ViewResolver do?","options":[" It supports internationalization of web applications by detecting a user's locale.\r\n"," It generates a view by mapping a logical view name returned by a controller method to a view technology.\r\n"," It creates a unique view determined by the uers's browser type,supporting cross-browser compatibility.\r\n"," It maps custom parameters to SQL views in the database, allowing for dynamic content to be created in the response.\r\n\r\n"],"correctAns":2},{"query":" Q5. How are Spring Data repositories implemented by Spring at runtime?","options":[" Spring automatically generated code for you based on your YAML config that defined a MethodInterceptor chain that intercept calls to the instance and computed SQL on the fly.\r\n"," A JDK proxy instance is created, which backs the repository interface, and a MethodInterceptor intercepts calls to the instance and routes as required.\r\n"," The Spring JDK proxy creates a separate runtime process that acts as an intermediary between the database and the Web server, and intercepts calls to the instance and handles requests.\r\n"," Spring automatically generated code for you based on your XML config files that define a SpringMethodAutoGeneration factory that intercepts calls to the instance and creates dynamic method that computer SQL on the fly.\r\n\r\n"],"correctAns":2},{"query":" Q6. What is SpEL and how is it used in Spring?","options":[" SpEL(Spring Expression Language) runs in the JVM and can act as a drop-in replacement for Groovy or other languages.\r\n"," SpEL(Spring Expression Language) supports boolean and relational operators and regular expressions, and is used for querying a graph of objects at runtime.\r\n"," SpEL(Spring Expression Language) allows you to build, configure,and execute tasks such as building artifacts and downloading object dependencies.\r\n"," SpEL(Spring Expression Language) natively transpiles one JVM language to another, allowing for greater flexibility.\r\n\r\n"],"correctAns":2},{"query":" Q7. The process of linking aspects with other objects to create an advised object is called","options":[" dynamic chaining\r\n"," banding\r\n"," weaving\r\n"," interleaving\r\n\r\n"],"correctAns":3},{"query":" Q8. How are JDK Dynamic proxies and CGLIB proxies used in Spring?","options":[" JDK Dynamic proxy can proxy only interface, so it is used if the target implements at least one interface. A CGLIB proxy can create a proxy by subclassing and is used if the target does not implement an interface.\r\n"," Only JDK Dynamic proxies are used in the Spring Bean Lifecycle. CGLIB proxies are used only for integrating with other frameworks.\r\n"," Only CGLIB proxies are used in the Spring Bean Lifecycle. JDK Dynamic proxies are used only for integrating with other frameworks.\r\n"," JDK Dynamic proxy can only using an abstract class extended by a target. A CGLIB proxy can create a proxy through bytecode interweaving and is used if the target does not extend an abstract class.\r\n\r\n"],"correctAns":1},{"query":" Q9. Which of these is not a valid method on the JoinPoint interface?","options":[" getArgs()\r\n"," getExceptions()\r\n"," getSignature()\r\n"," getTarget()\r\n\r\n"],"correctAns":2},{"query":" Q10. In what order do the @PostConstruct annotated method, the init-method parameter method on beans and the afterPropertiesSet() method execute?","options":[" 1. afterPropertiesSet() 2. init-method 3. @PostConstruct\r\n"," 1. @PostConstruct 2. afterPropertiesSet() 3. init-method\r\n"," 1. init-method 2. afterPropertiesSet() 3. @PostConstruct\r\n"," You cannot use these methods together-you must choose only one.\r\n\r\n"],"correctAns":2},{"query":" Q11. What is the function of the `@Transactional` annotation at the class level?","options":[" It's a transaction attribute configured by `spring.security.transactions.xml` config file that uses Spring's transaction implementation and validation code.\r\n"," It's a transaction that must actively validate by the bytecode of a transaction using Spring's `TransactionBytecodeValidator` class. Default Transaction behavior rolls back on validation exception but commits on proper validation\r\n"," It creates a proxy that implements the same interface(s) as the annotated class, allowing Spring to inject behaviors before, after, or around method calls into the object being proxied.\r\n"," It's a transaction that must be actively validated by Spring's `TransactionValidator` class using Spring's transaction validation code. Default Transaction behavior rolls back on validation exception.\r\n\r\n"],"correctAns":3},{"query":" Q12. Which is a valid example of the output from this code (ignoring logging statements) ?","code":"java\r\n@SpringBootApplication\r\npublic class App {\r\n     public static void main(String args[]) {\r\n          SpringApplication.run(App.class, args);\r\n          System.out.println(\"startup\");\r\n     }\r\n}\r\n\r\npublic class Print implements InitializingBean {\r\n     @Override\r\n     public void afterPropertiesSet() throws Exception {\r\n          System.out.println(\"init\");\r\n     }\r\n}\r\n","options":[" Nothing will print\r\n"," startup\r\n      init\r\n"," init\r\n"," startup\r\n\r\n"],"correctAns":1},{"query":" Q13. Which println statement would you remove to stop this code throwing a null pointer exception?","code":"java\r\n@Component\r\npublic class Test implements InitializingBean {\r\n     @Autowired\r\n     ApplicationContext context;\r\n     @Autowired\r\n     static SimpleDateFormt formatter;\r\n\r\n     @Override\r\n     public void afterPropertiesSet() throws Exception {\r\n          System.out.println(context.containsBean(\"formatter\") + \" \");\r\n          System.out.println(context.getBean(\"formatter\").getClass());\r\n          System.out.println(formatter.getClass());\r\n          System.out.println(context.getClass());\r\n     }\r\n}\r\n\r\n@Configuration\r\nclass TestConfig {\r\n     @Bean\r\n     public SimpleDateFormat formatter() {\r\n          return new SimpleDateFormat();\r\n     }\r\n}\r\n","options":[" formatter.getClass()\r\n"," context.getClass()\r\n"," context.getBean(\"formatter\").getClass()\r\n"," context.containsBean(\"formatter\")\r\n\r\n"],"correctAns":1},{"query":" Q14. What is the root interface for accessing a Spring bean container?","options":[" SpringInitContainer\r\n"," ResourceLoader\r\n"," ApplicationEventPublisher\r\n"," BeanFactory\r\n\r\n"],"correctAns":4},{"query":" Q15. Which annotation can be used within Spring Security to apply method level security?","options":[" @Secured\r\n"," @RequiresRole\r\n"," @RestrictedTo\r\n"," @SecurePath\r\n\r\n"],"correctAns":1},{"query":" Q16. What is the result of calling the map controller method using the HTTP request GET localhost:8080/map?foo=foo&bar=bar ?","code":"java\r\n@RestController\r\npublic class SampleController {\r\n\r\n     @RequestMapping(\"/map\")\r\n     public String map(@RequestParam(\"bar\") String foo, @RequestParam(\"foo\") String bar) {\r\n          return bar + foo;\r\n     }\r\n}\r\n","options":[" An InvalidParameterNameMappingException is thrown at runtime.\r\n"," barfoo\r\n"," foobar\r\n"," A status code of 400 Bad Request is returned.\r\n\r\n"],"correctAns":3},{"query":" Q17. What is the purpose of the @Lazy annotation and why would you use it?","options":[" It prevents a bean from being created and injected until you run a specific CLI command. It reduces complexity in the application.\r\n"," It can be applied to a bean so that the bean is not persisted in the database. It reduces the number of database operations.\r\n"," It can be applied to a bean so that the bean is not created and injected until it is needed. It can help speed up startup time for your application.\r\n"," It prevents a bean from being created and injected until it receives a HTTP request to a callback hook. It reduces disk footprint.\r\n\r\n"],"correctAns":3},{"query":" Q18. What is dependency injection?","options":[" a method by which objects define dependencies they need as abstractions that allows the framework to instantiate and configure them in a central location at runtime.\r\n"," a paradigm where dependent code is injected into the bytecode of a Java application on a remote server.\r\n"," a way of injecting remote dependencies into a pre-packaged JAR file from the file system.\r\n"," a way of injecting remote dependencies into a pre-packaged WAR file from the file system.\r\n\r\n"],"correctAns":1},{"query":" Q19. What is a RESTful web service?","options":[" Reactive Enterprise Status Transfer is a web service comprising a set of guidelines and technical constraints for web services that monitor and alert of a set of mission-critical resources.\r\n"," Representational State Transfer an architectural style for creating web services that includes client-server architecture, statelessness, cacheability, a layered system, and a uniform interface.\r\n"," Redundant Enumerated State Transfer is a web service that provides redundancy in the case of failure and outlines technical constraints for web services that have access to resources.\r\n"," Reactive Enterprise State Transfer is a web service comprising a set of guidelines and technical constraints for web services y that have access to resources and are async in nature.\r\n\r\n"],"correctAns":2},{"query":" Q20. What happens when a class is annotated with the @Controller annotation?","options":[" A controller bean definition is defined in the servlet's WebApplicationContext. The class is marked as a web component, and you can map requests to controller methods.\r\n"," A controller bean definition is defined in the Web Context, and Web Servlet is marked as a component that reads mapped controller requests from an XML config file.\r\n"," A controller bean definition is defined in the Tomcat Context, and the Controller Servlet is marked as a web component that reads mapped controller requests from a YAML config file.\r\n"," A controller bean definition is defined in the Servlet Context, and the Controller Servlet is marked as a component that reads mapped controller requests from an XML config file.\r\n\r\n"],"correctAns":1},{"query":" Q21. Which property can be used to change the port of a Spring application?","options":[" Port\r\n"," spring.port\r\n"," spring.settings.port\r\n"," server.port\r\n\r\n"],"correctAns":4},{"query":" Q22. What is the purpose of the @ResponseBody annotation?","options":[" to validate the char array contained in a response to ensure that it is a valid character encoding\r\n"," to generate a local byte stream from the body of a response that allows a request to be scanned for security risks\r\n"," to indicate whether a handler method return value should be bound to the web response body in servlet environments\r\n"," to ensure a ThreadLocal byte stream that allows a response to be encoded for reading directly into a socket stream\r\n\r\n"],"correctAns":3},{"query":" Q23. How are mocking frameworks such as Mockito used with Spring?","options":[" Mockito will spin up a mock web service hosted in a Docker container that can respond to HTTP requests to mock out third-party APIs.\r\n"," Mockito can use annotations or factory methods to create mock objects that may be injected into tests in place of dependencies. The behavior of mocks can be explicitly configured.\r\n"," Mockito will create mock users to repeatedly perform requests against your Spring application to test your app's ability to take load.\r\n"," Mockito will spin up a mock web service hosted in a Docker container that can respond to RPC calls to mock out remote resources.\r\n\r\n"],"correctAns":2},{"query":" Q24. What is the name of the central servlet that dispatches requests to controllers?","options":[" DispatchingDelegatorServlet\r\n"," DispatcherServlet\r\n"," Router\r\n"," FrontControllerServlet\r\n\r\n"],"correctAns":2},{"query":" Q25. What is the purpose of the Spring IoC (Inversion of Control) container?","options":[" It instantiates and configures objects, supplied at runtime, to classes that define them as a dependency.\r\n"," It allows the front-end code to manage the ResponseBody objects provided by a back-end REST API.\r\n"," It allows a database to define business objects via a shared schema at compile time.\r\n"," It facilitates a remote server to configure a local application.\r\n\r\n"],"correctAns":1}]