[{"query":" Q26. What is component scanning?","options":[" feature that scans packages for classes with specific annotations and, when found, creates their bean definitions within the IoC container\r\n"," paradigm where bytecode is actively scanned to identify additional optimizations to inject into components in the application context\r\n"," a method by which cloud repositories are scanned to identify components for injection into an IoC container\r\n"," a method by which binary data in a database is searched to identify components for injection into the IoC container\r\n\r\n"],"correctAns":1},{"query":" Q27. What does @SpringBootApplication do?","options":[" This annotation takes the String literal passed into the annotation as a parameter and automatically generates all the code for your application as per the passed in template parameter.\r\n"," This compound annotation applies the @Bootable, @Springify, and @StandardConfig annotations that launch a CLI tool after launching the Spring Boot WAR file that will guide you through a series of prompts to set up your app.\r\n"," This annotation scans the provided spring-boot-config-construction.yaml file in your root directory and automatically generates all the code for your application as defined in the YAML file.\r\n\r\n"],"correctAns":2},{"query":" Q28. How does Spring Data facilitate queries against a datastore?","options":[" Queries are explicitly coded in repository implementations using the Spring Data CriteriaBuilder.\r\n"," Query metadata is stored in the underlying datastore and retrieved at runtime per repository.\r\n"," Queries are derived from the signatures of methods on a Spring Data repository that contain keywords in their name for constructing the query logic.\r\n"," A spring-data-queries.xml file contains queries within entity tags that specify the query logic for each repository.\r\n\r\n"],"correctAns":3},{"query":" Q29. How does Spring generate bean names for classes annotated with @Component that do not specify a name?","options":[" It uses the short name of the class with the first letter in lowercase.\r\n"," It uses the short name of the class.\r\n"," It uses the short name of the class in uppercase.\r\n"," It uses the canonical name of the class in lowercase.\r\n\r\n"],"correctAns":1},{"query":" Q30. What is the delegating filter proxy?","options":[" It's the servlet filter chain proxy that handles all requests to the route defined in spring.security.xml. All calls to the filter proxy are forwarded to the ErrorDispatcherServlet.\r\n"," It's the servlet filter chain that handles requests to the route defined in spring.security.factories. All calls to the filter proxy y are forwarded to the ErrorServlet.\r\n"," It's the servlet filter proxy delegating to a filter bean specified in web.xml. All calls to the filter proxy will be delegated to that servlet filter bean.\r\n"," It's the web servlet daemon filter proxy that delegates to a bean specified in spring.security.factories. All calls to the filter proxy that do not contain a proper route will return an error.\r\n\r\nReference: [Overview and Need for DelegatingFilterProxy in Spring](https://www.baeldung.com/spring-delegating-filter-proxy)\r\n\r\n"],"correctAns":3},{"query":" Q31. What value does Spring Boot Actuator provide?","options":[" It helps monitor and manage a Spring Boot application by providing endpoints such as health checks, auditing, metrics gathering, and HTTP tracing.\r\n"," It provides out-of-the-box functionality that integrates with third-party metrics platforms to automatically scale up and down the number of threads in threadpools.\r\n"," It's a CLI that allows you to modify the configuration of a running Spring Boot application without the need for restarting or downtime.\r\n"," It provides out-of-the-box functionality that integrates wiltr?third-party metrics platforms to automatically scale up and down the number of instances of the Spring Boot application.\r\n\r\nReference: [Spring Boot Actuator](https://www.baeldung.com/spring-boot-actuators)\r\n\r\n"],"correctAns":1},{"query":" Q32. What is the purpose of the @ContextConfiguration annotation in a JUnit Test?","options":[" It introspects the local machine and automatically provisions resources based on certain contextual configuration files.\r\n"," It automatically generates comments for annotated classes on autowired dependencies to provide additional context about dependencies.\r\n"," It defines metadata at the class-level to determine how to load or configure an ApplicationContext in Spring integration tests.\r\n"," It automatically generates JavaDocs for annotated classes to provide additional context about the purpose of the class.\r\n\r\nReference: [@ContextConfiguration Example in Spring Test](https://www.concretepage.com/spring-5/contextconfiguration-example-spring-test)\r\n\r\n"],"correctAns":3},{"query":" Q33. How are authentication and authorization different?","options":[" Authentication is the act of granting access to specific resources and functions based on config settings. Authorization is the act of introspecting a user's credentials to ensure they are not impersonating another user.\r\n"," Authentication is the act of verifying certain resources and functions are actually valid. Authorization is the act of verifying a user's credentials have not expired.\r\n"," Authentication is the act of verifying that certain resources and functions actually exist in the database. Authorization is the act of verifying a user's credentials to ensure they are valid.\r\n"," Authentication is validating that users are who they claim to be. Authorization is granting access to specific resources and functions.\r\n\r\n"],"correctAns":4},{"query":" Q34. What is the purpose of the @RequestBody annotation?","options":[" to create a ThreadLocal byte stream that allows a request to be encoded for reading directly into a database\r\n"," to automatically generate a ThreadLocal byte stream from the body of a request that allows a request to scanned for security risks\r\n"," to indicate whether an annotated handler method parameter should be bound to the web request body, which is converted by an HttpMessageConverter\r\n"," to automatically validate the characters contained in a request to ensure that they are a valid character encoding\r\n\r\n"],"correctAns":3},{"query":" Q35. What is the DispatcherServlet and what is its function?","options":[" The DispatcherServlet process daemon assigns a separate Web Servlet Container process to each HTTP request that comes into the web server.\r\n"," It is a servlet that dispatches HTTP requests to registered handlers/controllers for processing.\r\n"," The DispatcherServlet API assigns a separate Web Servlet Node process to each additional HTTP request that comes into the web server.\r\n"," It is a servlet that dispatches an array of background daemon processes that allocate memory and CPU cycles to each request.\r\n\r\n"],"correctAns":2},{"query":" Q36. What is Spring Boot autoconfiguration?","options":[" It triggers a local automated review of configuration files such as web.xml and detects possible security issues or automatically resolves circular dependencies.\r\n"," It triggers an automated review of configuration by a web-based agent that reviews your existing web.xml file and detects possible security issues.\r\n"," It's an opinionated, intelligent method of introspecting an app to configure beans that are likely to be needed. This configuration can be overridden over time with manual configuration.\r\n"," It provides plug-in functionality while editing your web.xml and other config files that will autocomplete common dependencies while typing.\r\n\r\n"],"correctAns":3},{"query":" Q37. Which are valid steps to take to enable JPA in Spring Boot?","options":[" Add an @EnableJpaRepositories annotation to your configuration class and create a Spring Data Repository.\r\n"," Add an @EnableJpaEntities annotation to your configuration class, create a Spring Data YAML configuration file, and manually update the Spring XML config files to define your repository locations.\r\n"," Add an @EnableDbFunctionality annotation to your configuration class, create a Spring Data XML configuration file, and manually update the Spring factories file to define your repositories.\r\n"," Add an @InitJpaEntities annotation to your configuration class, create a Spring Data properties configuration file, and manually update the Spring startup parameters to define your repository locations.\r\n\r\n"],"correctAns":1},{"query":" Q38. What is a transaction in the context of Spring Data?","options":[" a version-controlled schema change that is applied to a database\r\n"," a sequence of actions representing a single unit of work managed as a single operation that can be either committed or rolled back\r\n"," an encoded message and response between various shards of a database\r\n"," an exchange or interaction between various worker nodes in a multithreaded environment\r\n\r\n"],"correctAns":2},{"query":" Q39. Modularization of a concern that cuts across multiple classes is known as a(n)`____`.","options":[" multiclass\r\n"," aspect\r\n"," crosscut\r\n"," sidecut\r\n\r\n"],"correctAns":2},{"query":" Q40. How do you inject a dependency into a Spring bean?","options":[" any of these answers\r\n"," Annotate a Setter method with the @Autowired annotation.\r\n"," Specify parameters in the constructor with an optional @Autowired annotation.\r\n"," Use field injection.\r\n\r\n"],"correctAns":1},{"query":" Q41. Consider the properties file application.properties. How would you load the property my.property?","code":"java\r\nmy.property=Test\r\n","options":[" A\r\n\r\n```java\r\n@Prop(\"${my.property}\")\r\nprivate String val;\r\n```\r\n\r\n"," B\r\n\r\n```java\r\n@GetVal(\"my.property\")\r\nprivate String val;\r\n```\r\n\r\n"," C\r\n\r\n```java\r\n@GetProperty(\"${my.property}\")\r\nprivate String val;\r\n```\r\n\r\n"," D\r\n\r\n```java\r\n@Value(\"${my.property}\")\r\nprivate String val;\r\n```\r\n\r\n"],"correctAns":4},{"query":" Q42. What is a bean in the context of Spring?","options":[" a managed dependency defined by configuration metadata that can be injected into downstream classes\r\n"," a binary-encoded, agnostic, named entity that is translatable between different data formats\r\n"," a payload that is transferable between different services in a Service-Oriented Architecture (SOA)\r\n"," a discrete piece of data that is encoded in a binary format for persisting to a file system\r\n\r\n"],"correctAns":1},{"query":" Q43. Which property is given precedence by Spring?","options":[" application properties located in an application.properties file outside the application.jar\r\n"," @PropertySource annotations on configuration classes\r\n"," profile-specific application-{profile}.properties files\r\n"," application properties located in an application.properties file inside the application.jar\r\n\r\n"],"correctAns":3},{"query":" Q44. In the Spring Bean lifecycle pictured, what should the third step of the process be?","options":[" Persist bean definitions into a database\r\n"," Instance bean objects\r\n"," De-normalize bean definition\r\n"," Use reflection to inject bean objects into the servlet container\r\n\r\n"],"correctAns":2},{"query":" Q45. What Spring Boot property is used to set the logging level for the entire application in the application.properties file?","options":[" logging.settings\r\n"," log.level\r\n"," root.logger.level\r\n"," logging.level.root\r\n\r\nReference: [Logging in Spring Boot](https://www.baeldung.com/spring-boot-logging)\r\n\r\n"],"correctAns":4},{"query":" Q46. What is a Spring bean uniquely identified?","options":[" an autogenerated UUID\r\n"," a unique String name\r\n"," an auto-incremented Integer ID\r\n"," an ID derived from its location in memory\r\n\r\n"],"correctAns":2},{"query":" Q47. What is the difference between a JAR and a WAR distribution in Spring Boot?","options":[" Spring Boot can create a self-executable WAR file that runs without needing a servlet container. A JAR file has to be deployed to an existing web container such as Tomcat with separate files for dependencies.\r\n"," Spring Boot can create a JAR file that contains bytecode that interacts directly with the OS without needing a servlet container. A WAR file has to be deployed to an existing web container such as Tomcat with separate files for dependencies.\r\n"," The Spring Boot JAR file will be deployed to a Servlet container such as Tomcat on an existing running web server locally. The WAR file will be deployed to a cloud-based servlet container.\r\n"," Spring Boot can create a self-executable JAR file that contains all the dependencies and an embedded Servlet container. A WAR file has to be deployed to an existing web container such as Tomcat.\r\n\r\n"],"correctAns":4},{"query":" Q48. How does the transaction propagation setting impact the behavior of transactions?","options":[" It ensures that transactions that are commited to the database are propagated to all the shards of a clustered database system.\r\n"," None of these answers is correct.\r\n"," It guarantees that transactions that are submitted to the database cluster are propagated to all the nodes of a clustered database cloud.\r\n"," It enforces that a logical transaction scope is created for each method that determines rollback-only status, with an outer transaction scope being logically independent from the inner transaction scope.\r\n\r\n"],"correctAns":4},{"query":" Q49. What is printed when this code is run as a @SpringBootApplication?","code":"java\r\n@Component\r\npublic class Test implements InitializingBean {\r\n     @Autowired\r\n     ApplicationContext context;\r\n\r\n     private TestService service;\r\n     public void setService(TestService service) {\r\n          this.service = service;\r\n     }\r\n\r\n     @Override\r\n     public void afterPropertiesSet() throws Exception {\r\n          System.out.print(context.containsBean(\"testService\") + \" \");\r\n          System.out.println(service.getClass());\r\n     }\r\n}\r\n@Service\r\nclass TestService {}\r\n","options":[" a null pointer stacktrace\r\n"," true null\r\n"," true package.TestService\r\n"," false package.TestService\r\n\r\nExplanation: missing `@Autowired` on `private TestService service` or on the setter\r\n\r\n"],"correctAns":1},{"query":" Q50. To register a custom filter that applies only to certain URL patterns, you should remove the **\\_** annotation from the filter class and register a @Bean of type `_` in Spring @Configuration.","options":[" @RequestMapping; WebRequest\r\n"," @Controller; URLFilter\r\n"," @WebFilter; ServletContextInitializer\r\n"," @Component; FilterRegistrationBean\r\n\r\n"],"correctAns":4}]