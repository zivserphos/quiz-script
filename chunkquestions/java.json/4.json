[{"query":" Q79. Which operator is used to concatenate Strings in Java","options":[" `+`\r\n"," `&`\r\n"," `.`\r\n"," `-`\r\n\r\n- "],"correctAns":1},{"query":" Q80. How many times does this loop print \"exterminate\"?","code":"java\r\nfor (int i = 44; i > 40; i--) {\r\n    System.out.println(\"exterminate\");\r\n}\r\n","options":[" two\r\n"," four\r\n"," three\r\n"," five\r\n\r\n"],"correctAns":2},{"query":" Q81. What is the value of myCharacter after line 3 is run?","code":"java\r\n1: public class Main {\r\n2:   public static void main (String[] args) {\r\n3:     char myCharacter = \"piper\".charAt(3);\r\n4:   }\r\n5: }\r\n","options":[" p\r\n"," r\r\n"," e\r\n"," i\r\n\r\n"],"correctAns":3},{"query":" Q82. When should you use a static method?","options":[" when your method is related to the object's characteristics\r\n"," when you want your method to be available independently of class instances\r\n"," when your method uses an object's instance variable\r\n"," when your method is dependent on the specific instance that calls it\r\n\r\n"],"correctAns":2},{"query":" Q83. What phrase indicates that a function receives a copy of each argument passed to it rather than a reference to the objects themselves?","options":[" pass by reference\r\n"," pass by occurrence\r\n"," pass by value\r\n"," API call\r\n\r\n"],"correctAns":3},{"query":" Q84. In Java, what is the scope of a method's argument or parameter?","options":[" inside the method\r\n"," both inside and outside the method\r\n"," neither inside nor outside the method\r\n"," outside the method\r\n\r\n"],"correctAns":1},{"query":" Q85. What is the output of this code?","code":"java\r\npublic class Main {\r\n  public static void main (String[] args) {\r\n    int[] sampleNumbers = {8, 5, 3, 1};\r\n    System.out.println(sampleNumbers[2]);\r\n  }\r\n}\r\n","options":[" 5\r\n"," 8\r\n"," 1\r\n"," 3\r\n\r\n"],"correctAns":4},{"query":" Q86. Which change will make this code compile successfully?","code":"java\r\n1: public class Main {\r\n2:   String MESSAGE =\"Hello!\";\r\n3:   static void print(){\r\n4:     System.out.println(message);\r\n5:   }\r\n6:   void print2(){}\r\n7: }\r\n","options":[" Change line 2 to `public static final String message`\r\n"," Change line 6 to `public void print2(){}`\r\n"," Remove the body of the `print2` method and add a semicolon.\r\n"," Remove the body of the `print` method.\r\n\r\n**Explanation**: Changing line 2 to `public static final String message` raises the error `message not initialized in the default constructor`\r\n\r\n"],"correctAns":4},{"query":" Q87. What is the output of this code?","code":"java\r\nimport java.util.*;\r\nclass Main {\r\n  public static void main(String[] args) {\r\n    String[] array = new String[]{\"A\", \"B\", \"C\"};\r\n    List<String> list1 = Arrays.asList(array);\r\n    List<String> list2 = new ArrayList<>(Arrays.asList(array));\r\n    List<String> list3 = new ArrayList<>(Arrays.asList(\"A\", new String(\"B\"), \"C\"));\r\n    System.out.print(list1.equals(list2));\r\n    System.out.print(list1.equals(list3));\r\n  }\r\n}\r\n","options":[" falsefalse\r\n"," truetrue\r\n"," falsetrue\r\n"," truefalse\r\n\r\n"],"correctAns":2},{"query":" Q88. Which code snippet is valid?","options":[" `ArrayList<String> words = new ArrayList<String>(){\"Hello\", \"World\"};`\r\n"," `ArrayList words = Arrays.asList(\"Hello\", \"World\");`\r\n"," `ArrayList<String> words = {\"Hello\", \"World\"};`\r\n"," `ArrayList<String> words = new ArrayList<>(Arrays.asList(\"Hello\", \"World\"));`\r\n\r\n"],"correctAns":4},{"query":" Q89. What is the output of this code?","code":"java\r\nclass Main {\r\n  public static void main(String[] args) {\r\n    StringBuilder sb = new StringBuilder(\"hello\");\r\n    sb.deleteCharAt(0).insert(0, \"H\").\" World!\";\r\n    System.out.println(sb);\r\n  }\r\n}\r\n","options":[" A runtime exception is thrown.\r\n"," \"HelloWorld!\"\r\n"," \"hello\"\r\n"," ????\r\n\r\n"],"correctAns":1},{"query":" Q90. How would you use the TaxCalculator to determine the amount of tax on $50?","code":"java\r\nclass TaxCalculator {\r\n  static calculate(total) {\r\n    return total * .05;\r\n  }\r\n}\r\n","options":[" TaxCalculator.calculate(50);\r\n"," new TaxCalculator.calculate(50);\r\n"," calculate(50);\r\n"," new TaxCalculator.calculate($50);\r\n\r\n**Note:** This code won't compile, broken code sample\r\n\r\n- "],"correctAns":1},{"query":" Q93. What is the output of this code?","code":"java\r\n public class Main {\r\n    public static void main(String[] args) {\r\n      HashMap<String, Integer> pantry = new HashMap<>();\r\n\r\n      pantry.put(\"Apples\", 3);\r\n      pantry.put(\"Oranges\", 2);\r\n\r\n      int currentApples = pantry.get(\"Apples\");\r\n      pantry.put(\"Apples\", currentApples + 4);\r\n\r\n      System.out.println(pantry.get(\"Apples\"));\r\n    }\r\n}\r\n","options":[" 3\r\n"," 4\r\n"," 6\r\n"," 7\r\n\r\n"],"correctAns":4},{"query":" Q94. Which characteristic does not apply to instances of java.util.HashSet=","options":[" uses hashcode of objects when inserted\r\n"," contains unordred elements\r\n"," contains unique elements\r\n"," contains sorted elements\r\n\r\n**Explanation**: HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.\r\n\r\n"],"correctAns":4},{"query":" Q95. What is the output?","code":"java\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tPriorityQueue<Integer> queue = new PriorityQueue<>();\r\n\t\tqueue.add(4);\r\n\t\tqueue.add(3);\r\n\t\tqueue.add(2);\r\n\t\tqueue.add(1);\r\n\r\n\t\twhile (queue.isEmpty() == false) {\r\n\t\t\tSystem.out.printf(\"%d\", queue.remove());\r\n\t\t}\r\n\t}\r\n}\r\n","options":[" 1 3 2 4\r\n"," 4 2 3 1\r\n"," 1 2 3 4\r\n"," 4 3 2 1\r\n\r\n"],"correctAns":3},{"query":" Q96. What will this code print, assuming it is inside the main method of a class?","options":[" my\r\n"," hellomyfriends\r\n"," hello\r\n"," friends\r\n\r\n"],"correctAns":3},{"query":" Q97. You have an instance of type Map<String, Integer> named instruments containing the following key-value pairs: guitar=1200, cello=3000, and drum=2000. If you add the new key-value pair cello=4500 to the Map using the put method, how many elements do you have in the Map when you call instruments.size()?","options":[" 2\r\n"," When calling the put method, Java will throw an exception\r\n"," 4\r\n"," 3\r\n\r\n"],"correctAns":4},{"query":" Q98. Which class acts as root class for Java Exception hierarchy?","options":[" Clonable\r\n"," Throwable\r\n"," Object\r\n"," Serializable\r\n\r\n"],"correctAns":2},{"query":" Q100. Which class does not implement the java.util.Collection interface?","options":[" java.util.Vector\r\n"," java.util.ArrayList\r\n"," java.util.HashSet\r\n"," java.util.HashMap\r\n\r\n**Explanation**: HashMap class implements Map interface.\r\n\r\n"],"correctAns":4},{"query":" Q101. You have a variable of named `employees` of type `List<Employee>` containing multiple entries. The `Employee` type has a method `getName()` that returns te employee name. Which statement properly extracts a list of employee names?","options":[" `employees.collect(employee -> employee.getName());`\r\n"," `employees.filter(Employee::getName).collect(Collectors.toUnmodifiableList());`\r\n"," `employees.stream().map(Employee::getName).collect(Collectors.toList());`\r\n"," `employees.stream().collect((e) -> e.getName());`\r\n\r\n"],"correctAns":3},{"query":" Q102. What is the correct return type for the `processFunction` method:","code":"\r\n____ processFunction(Integer number, Function<Integer, String> lambda) {\r\n    return lambda.apply(number);\r\n}\r\n","options":[" Function<Integer, String>\r\n"," Integer\r\n"," String\r\n"," Consumer\r\n\r\n"],"correctAns":3},{"query":" Q103. This code does not compile. What needs to be changed so that it does?","code":"\r\npublic enum Direction {\r\n    EAST(\"E\"),\r\n    WEST(\"W\"),\r\n    NORTH(\"N\"),\r\n    SOUTH(\"S\");\r\n\r\n    private final String shortCode;\r\n\r\n    public String getShortCode() {\r\n        return shortCode;\r\n    }\r\n}\r\n","options":[" Add a constructor that accepts a `String` parameter and assigns it to the field `shortCode`.\r\n"," Remove the `final` keyword for the field `shortCode`.\r\n"," All enums need to be defined on a single line of code.\r\n"," Add a setter method for the field `shortCode`.\r\n\r\n"],"correctAns":1},{"query":" Q104. Which language feature ensures that objects implementing the `AutoCloseable` interface are closed when it completes?","options":[" try-catch-finally\r\n"," try-finally-close\r\n"," try-with-resources\r\n"," try-catch-close\r\n\r\n"],"correctAns":3},{"query":" Q105. What code should go in line 3?","code":"java\r\nclass Main {\r\n    public static void main(String[] args) {\r\n\r\n        array[0] = new int[]{1, 2, 3};\r\n        array[1] = new int[]{4, 5, 6};\r\n        array[2] = new int[]{7, 8, 9};\r\n        for (int i = 0; i < 3; i++)\r\n            System.out.print(array[i][1]); //prints 258\r\n    }\r\n}\r\n","options":[" `int[][] array = new int[][];`\r\n"," `int[][] array = new int[3][3];`\r\n"," `int[][] array = new int[2][2];`\r\n"," `int[][] array = [][];`\r\n\r\n"],"correctAns":2},{"query":" Q106. Is this an example of method overloading or overriding?","code":"java\r\nclass Car {\r\n    public void accelerate() {}\r\n}\r\nclass Lambo extends Car {\r\n    public void accelerate(int speedLimit) {}\r\n    public void accelerate() {}\r\n}\r\n","options":[" neither\r\n"," both\r\n"," overloading\r\n"," overriding\r\n"],"correctAns":2}]