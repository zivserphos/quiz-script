[{"query":" Q1. Given the string \"strawberries\" saved in a variable called fruit, what would `fruit.substring(2, 5)` return?","options":[" rawb\r\n"," raw\r\n"," awb\r\n"," traw\r\n\r\n**Reasoning:** The substring method is accepting two arguments.\r\n\r\n- The first argument being the index to start(includes that char at 2)\r\n- and the second the index of the string to end the substring(excludes the char at 5).\r\n- Strings in Java are like arrays of chars.\r\n- Therefore, the method will return \"raw\" as those are the chars in indexes 2,3, and 4.\r\n- You can also take the ending index and subtract the beginning index from it, to determine how many chars will be included in the substring (5-2=3).\r\n\r\n"],"correctAns":2},{"query":" Q2. How can you achieve runtime polymorphism in Java?","options":[" method overloading\r\n"," method overrunning\r\n"," method overriding\r\n"," method calling\r\n\r\n"],"correctAns":3},{"query":" Q3. Given the following definitions, which of these expression will **NOT** evaluate to true?","options":[" `(i1 | i2) == 3`\r\n"," `i2 && b1`\r\n"," `b1 || !b2`\r\n"," `(i1 ^ i2) < 4`\r\n\r\n"],"correctAns":2},{"query":" Q5. What is the output of this code?","code":"java\r\n1: class Main {\r\n2:   public static void main (String[] args) {\r\n3:     int array[] = {1, 2, 3, 4};\r\n4:     for (int i = 0; i < array.size(); i++) {\r\n5:        System.out.print(array[i]);\r\n6:     }\r\n7:   }\r\n8: }\r\n","options":[" It will not compile because of line 4.\r\n"," It will not compile because of line 3.\r\n"," 123\r\n"," 1234\r\n\r\n"],"correctAns":1},{"query":" Q6. Which of the following can replace the CODE SNIPPET to make the code below print \"Hello World\"?","code":"java\r\ninterface Interface1 {\r\n    static void print() {\r\n        System.out.print(\"Hello\");\r\n    }\r\n}\r\n\r\ninterface Interface2 {\r\n    static void print() {\r\n        System.out.print(\"World!\");\r\n    }\r\n}\r\n","options":[" `super1.print(); super2.print();`\r\n"," `this.print();`\r\n"," `super.print();`\r\n"," `Interface1.print(); Interface2.print();`\r\n\r\n"],"correctAns":4},{"query":" Q7. What does the following code print?","code":"java\r\nString str = \"abcde\";\r\nstr.trim();\r\nstr.toUpperCase();\r\nstr.substring(3, 4);\r\nSystem.out.println(str);\r\n","options":[" CD\r\n"," CDE\r\n"," D\r\n"," \"abcde\"\r\n\r\n"],"correctAns":4},{"query":" Q8. What is the result of this code?","code":"java\r\nclass Main {\r\n    public static void main (String[] args){\r\n        System.out.println(print(1));\r\n    }\r\n    static Exception print(int i){\r\n        if (i>0) {\r\n            return new Exception();\r\n        } else {\r\n            throw new RuntimeException();\r\n        }\r\n    }\r\n}\r\n","options":[" It will show a stack trace with a runtime exception.\r\n"," \"java.lang.Exception\"\r\n"," It will run and throw an exception.\r\n"," It will not compile.\r\n\r\n"],"correctAns":2},{"query":" Q9. Which class can compile given these declarations?","code":"java\r\ninterface One {\r\n    default void method() {\r\n        System.out.println(\"One\");\r\n    }\r\n}\r\n\r\ninterface Two {\r\n    default void method () {\r\n        System.out.println(\"One\");\r\n    }\r\n}\r\n","options":[" A\r\n\r\n```java\r\nclass Three implements One, Two {\r\n    public void method() {\r\n        super.One.method();\r\n    }\r\n}\r\n```\r\n\r\n"," B\r\n\r\n```java\r\nclass Three implements One, Two {\r\n    public void method() {\r\n        One.method();\r\n    }\r\n}\r\n```\r\n\r\n"," C\r\n\r\n```java\r\nclass Three implements One, Two {\r\n}\r\n```\r\n\r\n"," D\r\n\r\n```java\r\nclass Three implements One, Two {\r\n    public void method() {\r\n        One.super.method();\r\n    }\r\n}\r\n```\r\n\r\n"],"correctAns":4},{"query":" Q10. What is the output of this code?","code":"java\r\nclass Main {\r\n    public static void main (String[] args) {\r\n        List list = new ArrayList();\r\n        list.add(\"hello\");\r\n        list.add(2);\r\n        System.out.print(list.get(0) instanceof Object);\r\n        System.out.print(list.get(1) instanceof Integer);\r\n    }\r\n}\r\n","options":[" The code does not compile.\r\n"," truefalse\r\n"," truetrue\r\n"," falsetrue\r\n\r\n"],"correctAns":3},{"query":" Q11. Given the following two classes, what will be the output of the Main class?","code":"java\r\npackage mypackage;\r\npublic class Math {\r\n    public static int abs(int num){\r\n        return num < 0 ? -num : num;\r\n    }\r\n}\r\npackage mypackage.elementary;\r\npublic class Math {\r\n    public static int abs (int num) {\r\n        return -num;\r\n    }\r\n}\r\n\r\n\r\njava\r\nimport mypackage.Math;\r\nimport mypackage.elementary.*;\r\n\r\nclass Main {\r\n    public static void main (String args[]){\r\n        System.out.println(Math.abs(123));\r\n    }\r\n}\r\n","options":[" Lines 1 and 2 generate compiler errors due to class name conflicts.\r\n"," \"-123\"\r\n"," It will throw an exception on line 5.\r\n"," \"123\"\r\n\r\n**Explanation:** `The answer is \"123\". The `abs()` method evaluates to the one inside mypackage.Math class.`\r\n\r\n"],"correctAns":4},{"query":" Q12. What is the result of this code?","code":"java\r\n1: class MainClass {\r\n2:  final String message(){\r\n3:      return \"Hello!\";\r\n4:  }\r\n5: }\r\n\r\n6: class Main extends MainClass {\r\n7:  public static void main(String[] args) {\r\n8:      System.out.println(message());\r\n9:  }\r\n\r\n10: String message(){\r\n11:     return \"World!\";\r\n12:  }\r\n13: }\r\n","options":[" It will not compile because of line 10.\r\n"," \"Hello!\"\r\n"," It will not compile because of line 2.\r\n"," \"World!\"\r\n\r\n**Explanation:** Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method,\r\nand also note that Non-static method message() cannot be referenced from a static context.\r\n\r\n"],"correctAns":1},{"query":" Q13. Given this code, which command will output \"2\"?","code":"java\r\nclass Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(args[2]);\r\n    }\r\n}\r\n","options":[" `java Main 1 2 \"3 4\" 5`\r\n"," `java Main 1 \"2\" \"2\" 5`\r\n"," `java Main.class 1 \"2\" 2 5`\r\n"," `java Main 1 \"2\" \"3 4\" 5`\r\n\r\n"],"correctAns":2},{"query":" Q14. What is the output of this code?","code":"java\r\nclass Main {\r\n    public static void main(String[] args){\r\n        int a = 123451234512345;\r\n        System.out.println(a);\r\n    }\r\n}\r\n","options":[" \"123451234512345\"\r\n"," Nothing - this will not compile.\r\n"," a negative integer value\r\n"," \"12345100000\"\r\n\r\n**Reasoning:** The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore this code will not compile as the number assigned to 'a' is larger than the int type can hold.\r\n\r\n"],"correctAns":2},{"query":" Q15. What is the output of this code?","code":"java\r\nclass Main {\r\n    public static void main (String[] args) {\r\n        String message = \"Hello world!\";\r\n        String newMessage = message.substring(6, 12)\r\n            + message.substring(12, 6);\r\n        System.out.println(newMessage);\r\n    }\r\n}\r\n","options":[" The code does not compile.\r\n"," A runtime exception is thrown.\r\n"," \"world!!world\"\r\n"," \"world!world!\"\r\n\r\n"],"correctAns":2},{"query":" Q16. How do you write a foreach loop that will iterate over ArrayList\\<Pencil\\>pencilCase?","options":[" `for (Pencil pencil : pencilCase) {}`\r\n"," `for (pencilCase.next()) {}`\r\n"," `for (Pencil pencil : pencilCase.iterator()) {}`\r\n"," `for (pencil in pencilCase) {}`\r\n\r\n"],"correctAns":1},{"query":" Q19. What does this code print?","code":"java\r\nSystem.out.print(\"apple\".compareTo(\"banana\"));\r\n","options":[" `0`\r\n"," positive number\r\n"," negative number\r\n"," compilation error\r\n\r\n"],"correctAns":3},{"query":" Q20. You have an ArrayList of names that you want to sort alphabetically. Which approach would **NOT** work?","options":[" `names.sort(Comparator.comparing(String::toString))`\r\n"," `Collections.sort(names)`\r\n"," `names.sort(List.DESCENDING)`\r\n"," `names.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList())`\r\n\r\n"],"correctAns":3},{"query":" Q21. By implementing encapsulation, you cannot directly access the class's \\_ properties unless you are writing code inside the class itself.","options":[" private\r\n"," protected\r\n"," no-modifier\r\n"," public\r\n\r\n"],"correctAns":1},{"query":" Q22. Which is the most up-to-date way to instantiate the current date?","options":[" `new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())`\r\n"," `new Date(System.currentTimeMillis())`\r\n"," `LocalDate.now()`\r\n"," `Calendar.getInstance().getTime()`\r\n\r\n**Explanation**: LocalDate is newest class added in java 8\r\n\r\n"],"correctAns":3},{"query":" Q23. Fill in the blank to create a piece of code that will tell whether `int0` is divisible by `5`:","options":[" `int0 / 5 ? true: false`\r\n"," `int0 % 5 == 0`\r\n"," `int0 % 5 != 5`\r\n"," `Math.isDivisible(int0, 5)`\r\n\r\n"],"correctAns":2},{"query":" Q24. How many times will this code print \"Hello World!\"?","code":"java\r\nclass Main {\r\n    public static void main(String[] args){\r\n        for (int i=0; i<10; i=i++){\r\n            i+=1;\r\n            System.out.println(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n","options":[" 10 times\r\n"," 9 times\r\n"," 5 times\r\n"," infinite number of times\r\n\r\n**Explanation**: Observe the loop increment. It's not an increment, it's an assignment(post).\r\n\r\n"],"correctAns":1},{"query":" Q25. The runtime system starts your program by calling which function first?","options":[" print\r\n"," iterative\r\n"," hello\r\n"," main\r\n\r\n"],"correctAns":4},{"query":" 26. What code would you use in Constructor A to call Constructor B?","code":"java\r\npublic class Jedi {\r\n  /* Constructor A */\r\n  Jedi(String name, String species){}\r\n\r\n  /* Constructor B */\r\n  Jedi(String name, String species, boolean followsTheDarkSide){}\r\n  }\r\n","options":[" Jedi(name, species, false)\r\n"," new Jedi(name, species, false)\r\n"," this(name, species, false)\r\n"," super(name, species, false)\r\n\r\n  **Note:** This code won't compile, possibly broken code sample.\r\n\r\n"],"correctAns":3},{"query":" Q27. Which statement is **NOT** true?","options":[" An anonymous class may specify an abstract base class as its base type.\r\n"," An anonymous class does not require a zero-argument constructor.\r\n"," An anonymous class may specify an interface as its base type.\r\n"," An anonymous class may specify both an abstract class and interface as base types.\r\n\r\n"],"correctAns":2},{"query":" Q28. What will this program print out to the console when executed?","code":"java\r\nimport java.util.LinkedList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args){\r\n        LinkedList<Integer> list = new LinkedList<>();\r\n        list.add(5);\r\n        list.add(1);\r\n        list.add(10);\r\n        System.out.println(list);\r\n    }\r\n}\r\n","options":[" [5, 1, 10]\r\n"," [10, 5, 1]\r\n"," [1, 5, 10]\r\n"," [10, 1, 5]\r\n\r\n"],"correctAns":1}]