[{"query":"For observing changes to a property, which of these two statements cause the related method to be called and why?","code":"1. _val = 1;\r\n2. self.val= 100;","options":["Statement 2, since it calls the auto-created setter on the property.","Statement 1, since it uses the property directly.","Statement 2, since it specifies the class instance to use.","Statement 1, since it calls the auto-created setter on the property."],"correctAns":1},{"query":"What is wrong with this code?","code":"float x = 2.0;\r\nint(^foo)(int) = ^(int n1) {\r\n  return (int)(n1*x);\r\n};\r\nfoo(5);","options":["Ints and floats can't be multiplied.","The parameter isn't declared correctly.","x is not in the right scope.","Nothing is wrong with this code."],"correctAns":4},{"query":"What's the difference between an array and a set?","options":["Arrays are ordered, non-unique values.","Arrays are stored sorted.","Sets are ordered, unique values.","Sets can contain nils."],"correctAns":1},{"query":"Dot notation can be used for \\_?","options":["nothing, as they're never used in Objective-C","function calls only","property getter/setter","parameter delimiters"],"correctAns":3},{"query":"What is the value of newVals after this code is executed?","code":"    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\r\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];\r\n    NSArray *newVals = [vals filteredArrayUsingPredicate:pred];","options":["2,3","nil","This code contains an error","2,\"3\""],"correctAns":1},{"query":"How would this function be called?","options":["self.foo(5, b:10);","This code contains an error.","[self foo:5:10:20];","[self foo:5 b:10];"],"correctAns":4},{"query":"What is significant about this function declaration?","code":"    -(void)testFunc:(NSString**)str;","options":["The parameter is passed by value and can not be changed","\\*\\* is not allowed on a parameter","The parameter may be nil","The parameter is passed by reference and may be changed"],"correctAns":4},{"query":"What is printed from this code execution?","code":"    typedef enum {\r\n        thing1,\r\n        thing2,\r\n        thing3\r\n    } Thing;\r\n\r\n\r\n    -(void) enumStuff {\r\n        NSLog(@\"%d\", thing2);\r\n    }","options":["0","1","thing2","This code does not print anything"],"correctAns":2},{"query":"You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?","options":["non-atomic","strong","weak","atomic"],"correctAns":4},{"query":"What is wrong with this line of code?","code":"int temp = 1==1;","options":["`temp` is a keyword.","1==1 is invalid.","1==1 evaluates to a Boolean.","Nothing is wrong with it."],"correctAns":4},{"query":"What is special about the code within this block?","code":"dispatch_async(dispatch_get_main_queue(), ^{\r\n// code\r\n});","options":["It executes on the main queue.","It is the last code to run before the app goes inactive.","It executes on a background thread.","It is queued to execute in the background."],"correctAns":1},{"query":"How many items are in set1 after this code executes?","code":"NSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];\r\n[set1 add0bject:@3];","options":["zero","six","one","five"],"correctAns":4}]