[{"query":"What is the value of s?","code":"NSMutableString *s = [NSMutableString stringWithString: @\"123\"];\r\n[s appendString: @\"456\"];","options":["123456","123","456","This code contains an error."],"correctAns":1},{"query":"What's the value of i after these statements?","code":"NSString *str = nil;\r\nNSInteger i = str.integerValue;","options":["nil","0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)","-1","This code crashes."],"correctAns":2},{"query":"What value is in str after this line in executed?","options":["This code contains an error","test","nil","test more"],"correctAns":1},{"query":"What does this code print?","code":"    NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {\r\n      return evaluatedObject.intValue % 2 == 0;\r\n    }];\r\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\r\n    NSArray *n2 = [vals filteredArrayUsingPredicate:p2];\r\n    NSLog(@\"%@\", n2.firstObject);","options":["2","1,2,3","1,2","Nothing, since this code contains an error."],"correctAns":1},{"query":"Property defaults include \\_?","options":["atomic/strong","atomic/weak","nonatomic/weak","nonatomic/strong"],"correctAns":1},{"query":"What is the key difference between NSDictionary and NSMutableDictionary?","options":["NSMutableDictionary's values can change","NSMutableDictionary has not initializers.","NSDictionary can't be copied.","NSDictionary's values can change."],"correctAns":1},{"query":"What is foo?","options":["A function with a return type of float.","This code contains an error.","A variable declaration of type float.","A property of type float."],"correctAns":1},{"query":"What can you glean from this line?","options":["NameHelper is a category of NSString.","NameHelper is a subclass of NSString.","NSString implements the NameHelper protocol.","NSString has a helper class."],"correctAns":1},{"query":"What's wrong with this code?","options":["Nothing is wrong with this code.","Declarations do not need semicolons.","x=5 is an invalid float.","Variables can't be declared and initialized in the same state."],"correctAns":1},{"query":"How many times with this loop be executed?","code":"for (int x=0; x<100; x++) {\r\n  x = x + 1;\r\n}","options":["50","99","100","This code contains an error."],"correctAns":1},{"query":"What is this code an example of?","options":["Key-Value Observing","Class Value Observing","Key-Data Observing","KeyPath Observing"],"correctAns":1},{"query":"What does ARC stand for?","options":["Automatic ","Automatic Retain Checking","Async Retain Cycles","Automatic Release Code"],"correctAns":1},{"query":"What is printed for this code?","code":"int val = 0;\r\nval = 1.5;\r\nprintf(\"%d\", val);","options":["1","2","0","This code contains an error."],"correctAns":1},{"query":"What best describes class inheritance in Objective-C?","options":["single inheritance but multiple protocol implementation","Objective-C doesn't support inheritance","dual class inheritance","unlimited class inheritance and protocol adherence"],"correctAns":1},{"query":"How many keys does this NSDictionary have after this code is executed?","options":["2","4","5","This code contains an error."],"correctAns":1},{"query":"What is wrong with this code?","code":"NSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];\r\n[dict1 setValue:@\"key\" forKey:@\"value\"];","options":["The key and value items are mixed","Nothing is wrong with it","You can't set the capacity of a dictionary","NSMutableDictionary doesn't have a :setValue:forKey function."],"correctAns":2},{"query":"What is printed from this code?","code":"NSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding];\r\nNSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);","options":["print","This code is invalid","Nothing is printed from this code.","nil"],"correctAns":1},{"query":"What is different about this function?","options":["It is static","It is abstract.","It is inline.","This code contains an error."],"correctAns":1},{"query":"Structs can have \\_?","options":["functions","initializers","fields","all of these answers"],"correctAns":3},{"query":"What is wrong with this code?","code":"@interface MyClass : NSObject\r\n    @property (strong, nonatomic, readonly) NSString *name;\r\n  @end","options":["There is nothing wrong with this code.","There is not read-only directive.","MyClass doesn't implement NSObject.","Properties are declared in the implementation."],"correctAns":1},{"query":"What is an enums base type for the code below?","options":["There is no base type.","NSObject","int","NSNumber"],"correctAns":1},{"query":"If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?","options":["UserDefaults","plist file","CoreData","TextFile"],"correctAns":1},{"query":"What are categories used for?","options":["to extend other classes","to manage access control","to coordinate objects","to group classes"],"correctAns":1},{"query":"What is this Objective-C code checking?","code":"if ([keyPath isInstanceOf:[NSString class]]) {\r\n}","options":["This code contains an error","if keyPath is an instance of NSString","if keyPath's baseclass is the same as NSString's baseclass","if keyPath implements the same methods as NSString"],"correctAns":1},{"query":"What is this a declaration of?","options":["an Extension","a Generic","a block of code","an abstract class"],"correctAns":3},{"query":"For observing changes to a property, which of these two statements cause the related method to be called and why?","code":"1. _val = 1;\r\n2. self.val= 100;","options":["Statement 2, since it calls the auto-created setter on the property.","Statement 1, since it uses the property directly.","Statement 2, since it specifies the class instance to use.","Statement 1, since it calls the auto-created setter on the property."],"correctAns":1},{"query":"What is wrong with this code?","code":"float x = 2.0;\r\nint(^foo)(int) = ^(int n1) {\r\n  return (int)(n1*x);\r\n};\r\nfoo(5);","options":["Ints and floats can't be multiplied.","The parameter isn't declared correctly.","x is not in the right scope.","Nothing is wrong with this code."],"correctAns":4},{"query":"What's the difference between an array and a set?","options":["Arrays are ordered, non-unique values.","Arrays are stored sorted.","Sets are ordered, unique values.","Sets can contain nils."],"correctAns":1},{"query":"Dot notation can be used for \\_?","options":["nothing, as they're never used in Objective-C","function calls only","property getter/setter","parameter delimiters"],"correctAns":3},{"query":"What is the value of newVals after this code is executed?","code":"    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\r\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];\r\n    NSArray *newVals = [vals filteredArrayUsingPredicate:pred];","options":["2,3","nil","This code contains an error","2,\"3\""],"correctAns":1},{"query":"How would this function be called?","options":["self.foo(5, b:10);","This code contains an error.","[self foo:5:10:20];","[self foo:5 b:10];"],"correctAns":4},{"query":"What is significant about this function declaration?","code":"    -(void)testFunc:(NSString**)str;","options":["The parameter is passed by value and can not be changed","\\*\\* is not allowed on a parameter","The parameter may be nil","The parameter is passed by reference and may be changed"],"correctAns":4},{"query":"What is printed from this code execution?","code":"    typedef enum {\r\n        thing1,\r\n        thing2,\r\n        thing3\r\n    } Thing;\r\n\r\n\r\n    -(void) enumStuff {\r\n        NSLog(@\"%d\", thing2);\r\n    }","options":["0","1","thing2","This code does not print anything"],"correctAns":2},{"query":"You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?","options":["non-atomic","strong","weak","atomic"],"correctAns":4},{"query":"What is wrong with this line of code?","code":"int temp = 1==1;","options":["`temp` is a keyword.","1==1 is invalid.","1==1 evaluates to a Boolean.","Nothing is wrong with it."],"correctAns":4},{"query":"What is special about the code within this block?","code":"dispatch_async(dispatch_get_main_queue(), ^{\r\n// code\r\n});","options":["It executes on the main queue.","It is the last code to run before the app goes inactive.","It executes on a background thread.","It is queued to execute in the background."],"correctAns":1},{"query":"How many items are in set1 after this code executes?","code":"NSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];\r\n[set1 add0bject:@3];","options":["zero","six","one","five"],"correctAns":4}]