[{"query":"Where should you put images, JavaScript, and CSS so that they get processed by the asset pipeline?","options":["app/static","app/images","app/assets [","app/views"],"correctAns":3},{"query":"If the Rails asset pipeline is being used to serve JavaScript files, how would you include a link to one of those JavaScript files in a view?","options":["`<script src=\"/main.js\"></script>`","`<%= javascript_include_tag 'main' %>`","`<%= javascript_tag 'main' %>`","`<!-- include_javascript 'main' -->`"],"correctAns":2},{"query":"In Rails, what caching stores can be used?","options":["MemCacheStore, MongoDBStore, MemoryStore, and FileStore","MemoryStore, FileStore, and CacheCacheStore","MemoryStore, FileStore, MemCacheStore, RedisCacheStore, and NullStore","MemoryStore, FileStore, MySQLStore, and RedisCacheStore"],"correctAns":3},{"query":"What is the correct way to generate a ProductsController with an index action using only the command-line tools bundled with Rails?","options":["`rails generate controller --options {name: \"Products\", actions: \"index\"}`","`rails generate controller --name Products --action index`","`rails generate controller Products index`","`rails generate ProductsController --actions index`"],"correctAns":3},{"query":"If a model class is named Product, in which database table will ActiveRecord store and retrieve model instances?","options":["`product_table`","`all_products`","`products_table`","`products`"],"correctAns":4},{"query":"What is a popular alternative template language for generating views in a Rails app that is focused on simple abstracted markup?","options":["Mustache","Haml [","Liquid","Tilt"],"correctAns":2},{"query":"When Ruby methods add an exclamation point at the end of their name (such as `sort!`), what does it typically indicate?","options":["The method executes using \"sudo\" privileges.","Any ending line return will be omitted from the result.","The method will ignore exceptions that occur during execution.","It is a more powerful or destructive version of the method."],"correctAns":4},{"query":"What part of the code below causes the method `","code":"class MyModel < ApplicationRecord\r\nafter_find :decrypt_data\r\nend","options":["`MyModel.first.update(field: 'example')`","`MyModel.where(id: 42)`","`MyModel.first.destroy`","`MyModel.new(field: 'new instance')`"],"correctAns":2},{"query":"Which Rails helper would you use in the application view to protect against CSRF (Cross-Site Request Forgery) attacks?","options":["`csrf_protection`","`csrf_helper`","`csrf_meta_tags` [","`csrf`"],"correctAns":3},{"query":"In the model `User` you have the code shown below. When saving the model and `model.is_admin` is set to true, which callback will be called?","code":"before_save :encrypt_data, unless: ->(model) { model.is_admin }\r\nafter_save :clear_cache, if: ->(model) { model.is_admin }\r\nbefore_destroy :notify_admin_users, if: ->(model) { model.is_admin }","options":["`encrypt_data`","`clear_cache`","`notify_admin_users`","None of these callbacks will be called when `is_admin` is true."],"correctAns":1},{"query":"In a Rails controller, what does the code `params.permit(:name, :sku)` do?","options":["It filters out all parameters.","It filters out submitted form parameters that are not named `:name` or `:sku` to make forms more secure.","It raises an error if parameters that are not named `:name` or `:sku` are found.","It raises an error if the `:name` and `:sku` parameters are set to `nil`."],"correctAns":2},{"query":"Review the code below. Which Ruby operator should be used to fill in the blank so that the `sort` method executes properly?","code":"[5,8,2,6,1,3].sort {|v1,v2| v1 ___ v2}","options":["`=>`","`<==>`","`<=>`","`||`"],"correctAns":3},{"query":"Which ActiveRecord query prevents SQL injection?","options":["`Product.where(\"name = \" << @keyword)`","`Product.where(\"name = \" + h(@keyword))`","`Product.where(\"name = ?\", @keyword)`","`Product.where(\"name = #{@keyword}\")`"],"correctAns":4},{"query":"You made a spelling mistake while creating a table for bank accounts. Which code would you expect to see in a migration to fix the error?","code":null,"options":["class IAmADummy < ActiveRecord::Migration\r\n  def change\r\n    rename_column :accounts, :account_hodler, :account_holder\r\n  end\r\nend","class FixSpellling < ActiveRecord::Migration\r\n  def change\r\n    rename :accounts, :account_hodler, :account_holder\r\n  end\r\nend","class CoffeeNeeded < ActiveRecord::Migration\r\n  def change\r\n    remove_column :accounts, :account_hodler\r\n    add_column :accounts, :account_holder\r\n  end\r\nend","class OopsIDidItAgain < ActiveRecord::Migration\r\n  def rename\r\n    :accounts, :account_hodler, :account_holder\r\n  end\r\nend"],"correctAns":1},{"query":"Which HTML is closes to what this code would output?","code":"<% check_box(:post, :visible) %>","options":["<input type=\"hidden\" name=\"post[visible]\" value=\"0\" />\r\n<input type=\"checkbox\" name=\"post[visible]\" value=\"1\" />","<checkbox name=\"post[visible]\" value=\"1\" />","<input type=\"checkbox\" name=\"post[visible]\" value=\"1\" data-default-value=\"0\" />","<input type=\"checkbox\" name=\"post[visible]\" value=\"1\" />"],"correctAns":1},{"query":"There is a bug in this code. The logout message is not appearing on the login template. What is the cause?","code":"class AccessController < ActionController::Base\r\n  def destroy\r\n    session[:admin_id] = nil\r\n    flash[:notice] = \"\"You have been logged out\"\"\r\n    render('login')\r\nend","options":["The string assigned to flash[:notice] will not be available until the next browser request.","An instance variable should be used for flash[:notice]","This is an invalid syntax to use to assign valuse to flash[:notice]","The previous value of flash[:notice] will not be cleared automatically"],"correctAns":1},{"query":"Which statement about ActiveRecord models is true?","options":["Each database column requres adding a matching attr_accessor declaration in the ActiveRecord model.","All attributes in an ActiveRecord model are read-only declared as writable using attr_accessible","An instance of an ActiveRecord model will have attributes that match the columns in a corresponding database table.","ActiveRecord models can have only attributes that have a matching database column"],"correctAns":3},{"query":"What is the correct way to assign a value to the session?","code":null,"options":["$_SESSION['user_id'] = user.id","@session ||= Session.new << user.id","session_save(:user_id, user.id)","session[:user_id] = user.id"],"correctAns":4},{"query":"Which choice best describes the expected value of @result?","code":"@result = Article.first.tags.build(name: 'Urgent')","options":["either true or false","an unsaved Tag instance","a saved Tag instance","an array of Tag instances"],"correctAns":2},{"query":"What is the correct syntax for inserting a dynamic title tag into the header of your page from within an ERB view template?","code":null,"options":["<% render :head do %>\r\n  <title>My page title</title>\r\n<% end %>","<% content_for :head do %>\r\n  <title>My page title</title>\r\n<% end %>","<% render \"shared/head, locals: {title: \"My page title\"} %>","<% tield :head do %>\r\n  <title>My page title</title>\r\n<% end %>"],"correctAns":3},{"query":"How would you validate that a project's name is not blank, is fewer than 50 characters, and is unique?","code":null,"options":["class Project\r\n  validates :name, presence: true, length: { maximum: 50 }, uniqueness: true\r\nend","class Project\r\n  validate_attribute :name, [:presence, :uniqueness], :length => 1..50\r\nend","class Project\r\n  validate_before_save :name, [:presence, [:length, 50], :uniqueness], :length => 1..50\r\nend","class Project\r\n  validates_presense_of :name, :unique => true\r\n  validates_length_of :name, :maximum => 50\r\nend"],"correctAns":1},{"query":"If a product has a user-uploadable photo, which ActiveStorage method should fill in the blank?","code":"class Product << ApplicationRecord\r\n  ____ :photo\r\nend\r\n","options":["has_one_attached","has_image","attached_file","acts_as_attachment"],"correctAns":1},{"query":"If the only route defined is resources :products, what is an example of a URL that could be generated by this link_to method?","code":"link_to('Link', {controller: 'products', action: 'index', page: 3})","options":["/products?page=3","/products/index/3","/products/page/3","/products/index/page/3"],"correctAns":1},{"query":"Which part of the Rails framework is primarily responsible for making decisions about how to respond to a browser request?","options":["view","controller","ActiveRecord","model"],"correctAns":2},{"query":"If User is an ActiveRecord class, which choice would be expected to return an array?","options":["User.where(last_name: 'Smith')","User.find_or_create(last_name: 'Smith')","User.find_by_last_name('Smith')","User.find('Smith')"],"correctAns":1},{"query":"Which choice is not a valid Rails route?","options":["route \"products/index\", to: \"products/index\", via: :get","match \"products/index\", to: \"products#index\", via: :get","root \"products/index\"","get \"products/index\""],"correctAns":1},{"query":"Given a table of blog_posts and a related table of comments (comments made on each blog post), which ActiveRecord query will retrieve all blog posts with comments created during @range?","options":["BlogPost.joins (:comments).where(comments: {created_at: @range})","BlogPost.where(['comments.created_at', @range])","BlogPost.preload (\"comments.created_at\").where(created_at: @range)","BlogPost.includes (:comments).where('comments.created_at' => @range)"],"correctAns":1},{"query":"Given this Category model with an attribute for \"name\", what code would fill in the blank so that it sets saved_name to a string that is the category name that existed before the name was changed?","code":"ruby\r\nclass Category < ActiveRecord::Base\r\n  # has a database column for :name\r\nend\r\n\r\ncategory = Category.first\r\ncategory.name = 'News'\r\nsaved_name = _____","options":["category.name_was","category.saved(:name)","category.changes[:name]","category.name_changed?"],"correctAns":3},{"query":"Given two models, what is the issue with the query used to fetch them?","code":"ruby\r\nclass LineItem < ApplicationRecord\r\nend\r\n\r\nclass Order < ApplicationRecord\r\n  has_many :line_items\r\nend\r\n\r\nOrder.limit(3).each { |order| puts order.line_items }","options":["This query will result in extensive caching, and you will have to then deal with caching issues.","This query will result in the N+1 query issue. Three orders will result in four queries.","This query will result in the 1 query issue. Three orders will result in one query.","There are no issues with this query, and you are correctly limiting the number of Order models that will be loaded."],"correctAns":2},{"query":"Which choice is an _incorrect_ way to render a partial?","options":["`<%= render(:partial => 'shared/product') %>`","`<%= render('shared/product', :collection => @products) %>`","`<%= render(template: 'shared/product', with: @products) %>`","`<%= render('shared/product', locals: { product: @product }) %>`"],"correctAns":3},{"query":"Which code sample will skip running the `login_required` \"before\" filter on the `get_posts` controller action?","options":["`before_action :login_required, skip: [:get_posts]`","`skip_before_action :login_required, except: [:get_posts]`","`skip_before_action :login_required, only: [:get_posts]`","`skip_action before: :login_required, only: [:get_posts]`"],"correctAns":3},{"query":"Within a Rails model with a `cache_key` method, which code snippet will expire the cache whenever the model is updated?","code":null,"options":["ruby\r\nafter_update_commit do\r\ndestroy\r\nend","ruby\r\nafter_destroy do\r\nRails.cache.delete(cache_key)\r\nend","ruby\r\nafter_update_commit do\r\nRails.cache.delete(cache_key)\r\nend","ruby\r\nafter_update_commit do\r\nRails.cache.destroy(cache_key)\r\nend"],"correctAns":4},{"query":"After this migration has been executed, which statement would be true?","code":"ruby\r\nclass CreateGalleries < ActiveRecord::Migration\r\n  def change\r\n    create_table :galleries do |t|\r\n      t.string :name, :bg_color\r\n      t.integer :position\r\n      t.boolean :visible, default: false\r\n      t.timestamps\r\n    end\r\n  end\r\nend","options":["The galleries table will have no primary key.","The galleries table will include a column named \"updated_at\".","The galleries table will contain exactly seven columns.","The galleries table will have an index on the position column."],"correctAns":2},{"query":"Which code would you add to return a 404 to the API caller if the user is not found in the database?","code":"ruby\r\nclass UsersController < ApplicationController\r\n  def show\r\n    @user = User.find(params[:id])\r\n    render json: @user, status: :ok,\r\n    # Missing code\r\nend","options":["ruby\r\nrescue => e\r\n  logger.info e\r\nend","ruby\r\nrescue_from ActiveRecord::RecordNotFound, with: :render_not_found_response","ruby\r\nrescue ActiveRecord::RecordNotFound\r\n  render json: { message: 'User not found' }, status: :not_found\r\nend","ruby\r\nraise ActiveRecord::RecordNotFound\r\n  render json: { message: 'User not found' }, status: :user_not_found\r\nend"],"correctAns":2}]