[{"query":"You are working with the following XML code snippet. You have this line in your XSLT code `xsl:value-of-select=\"//car/make\"/>`. What does it display?","code":"<cars>\r\n    <car>\r\n        <make>Cadillac\r\n            <model>Escalade</model>\r\n            <price year=\"2007\">$20,000</price>\r\n        </make>\r\n    </car>\r\n</cars>","options":["Cadillac","Cadillac Escalade","Cadillac Escalade 20000","Cadillac Escalade $20,000"],"correctAns":4},{"query":"You need to display the list of cars in the code snippet below in a column format, with a counter column for each row. Which XPath function do you use for the counter?","code":"<cars>\r\n    <car><make>Cadillac</make> <model>Escalade</model> <year>2007</year></car>\r\n    <car><make>Ford</make> <model>Mustang</model> <year>1968</year></car>\r\n    <car><make>Mercedes</make> <model>C-Class</model> <year>1999</year></car>\r\n</cars>","options":["`format-number()`","`id()`","`count()`","`position()`"],"correctAns":4},{"query":"You are working with this XML code snippet from the XML document cars.xml. You need to return the information about the cars built after the year 2000, as an ordered list, starting with the most recent. What does your XQuery look like?","code":"<cars>\r\n    <car><make>Cadillac</make> <model>Escalade</model ><year>2007</year></car>\r\n    <car><make>Cadillac</make> <model>Escalade</model> <year>2011</year></car>\r\n    <car><make>Ford</make> <model>Mustang</model> <year>1968</year></car>\r\n    <car><make>Ford</make> <model>Mustang</model> <year>1998</year></car>\r\n    <car><make>Mercedes</make> <model>C-Class</model> <year>1999</year></car>\r\n    <car><make>Mercedes</make> <model>C-Class</model> <year>2009</year></car>\r\n</cars>","options":["xquery\r\n<ul>\r\n{\r\n    for $x in doc(\"cars.xml\")/cars/car\r\n    where $x/year>2000\r\n    order by $x/year descending\r\n    return <li>{$x}</li>\r\n}\r\n</ul>","xquery\r\n<ol>\r\n{\r\n    for $x in doc(\"cars.xml\")/cars/car\r\n    where $x/year>2000\r\n    order by $x/year desc\r\n    return <li>{data($x)}</li>\r\n}\r\n</ol>","xquery\r\n<ul>\r\n{\r\n    for $x in doc(\"cars.xml\")/cars/car\r\n    where $x/year>2000\r\n    order by $x/year\r\n    return <li>{$x}</li>\r\n}\r\n</ul>","xquery\r\n<ol>\r\n{\r\n    for $x in doc(\"cars.xml\")/cars/car\r\n    where $x/year>2000\r\n    order by $x/year descending\r\n    return <li>{data($x)}</li>\r\n}\r\n</ol>"],"correctAns":4},{"query":"The `readyState` property holds the status of the XMLHttpRequest. Which is NOT a valid status?","options":["`4 (DONE)`","`3 (LOADING)`","`1 (PROCESSING)`","`0 (UNSENT)`"],"correctAns":3},{"query":"You are working with an XML document that uses an XML schema. How can you extend the document with elements NOT specified by the schema?","options":["Use the `<any>` element.","Use the `<redefine>` element.","Use `<xs:extension>`.","Specify the new elements in the schema."],"correctAns":1},{"query":"You are working with an XML document that uses an XML schema. How do you ensure that an attribute must be specified for its corresponding element?","options":["Set the type attribute to `xs:required`.","Set the `use` attribute to `required`.","Set the minLength attribute to 1.","Set the minOccurs attribute to 1."],"correctAns":2},{"query":"You are working with the following XML code snippet. What do you need to include in your XSLT code to display `Mercedes, Cadillac, Ford`?","code":"<cars>\r\n    <car><make>Cadillac</make><model>Escalade</model>\r\n        <price year=\"2007\">20000</price></car>\r\n    <car><make>Ford</make><model>Mustang</model>\r\n        <price year=\"2008\">17000</price></car>\r\n    <car><make>Mercedes</make><model>C-Class</model>\r\n        <price year=\"2009\">24000</price></car>\r\n</cars>","options":["`<xsl:sort select=\"make\" />`","`<xsl:sort select=\"model\" />`","`<xsl:sort select=\"car\" />`","`<xsl:sort select=\"price\" />`"],"correctAns":2},{"query":"What is the correct syntax for comments in XQuery?","options":["`/* */`","`<!-- -->`","`//`","`(: :)`"],"correctAns":4},{"query":"Which DOM node type may NOT have the EntityReference node type as one of its child nodes?","options":["Element","Document","Entity","DocumentFragment"],"correctAns":2},{"query":"XHTML modules can be extended by adding elements, attributes, modifying content models, or some combination of these. What does a proper implementation of an XHTML module require?","options":["The implementation of an XHTML module requires an extension module and a validation module that ensures that the XHTML is well formed and valid; otherwise the extended instances aren't formally XHTML.","The implementation of an XHTML module requires a definitions module and a constraint module that specifies syntax rules and uses the parameter entities declared in the definitions module.","The implementation of an XHTML module requires a qualified name module and a declaration module that holds the element, element attribute, and content model declarations.","The implementation of an XHTML module requires a namespace module that holds the element, element attribute, and content model declarations, and a parameter module that uses the entities declared in the namespace module."],"correctAns":4},{"query":"The `<xsl:namespace-alias>` element is used to replace a namespace in the style sheet with a different namespace in the output. Which XSLT element needs to be its parent node?","options":["`<xsl:namespace>`","any valid element","root element","top-level element in the corresponding namespace"],"correctAns":3},{"query":"XML is a markup language, not a programming language. What makes XML not qualify to be a programming language?","options":["XML is too flexible and does not have enough reserved keywords.","XML contains only data and not any processing instructions.","XML does not perform any computation or algorithms.","XML does not have specialized syntax rules."],"correctAns":2},{"query":"What is true about these elements in XQuery?","code":"<cars>\r\n    <car><make>Cadillac</make><model>Escalade</model><year>2007</year></car>\r\n    <car><make>Cadillac</make><model>Escalade</model><year>2011</year></car>\r\n    <car><make>Ford</make><model>Mustang</model><year>1968</year></car>\r\n    <car><make>Ford</make><model>Mustang</model><year>1998</year></car>\r\n    <car><make>Mercedes</make><model>C-Class</model><year>1999</year></car>\r\n    <car><make>Mercedes</make><model>C-Class</model><year>2009</year></car>\r\n</cars>","options":["Elements `<make>` and `<model>` are ancestors of `<year>`.","Elements `<make>` and `<model>` are children of `<cars>`.","Elements `<make>` and `<model>` are siblings.","Elements `<car>` and `<cars>` are parents of `<make>` and `<model>`."],"correctAns":3},{"query":"Which is a valid CSS section for this XML code snippet?","code":"<cars>\r\n    <car><make>Cadillac</make><model>Escalade</model><year>2007</year></car>\r\n    <car><make>Ford</make><model>Mustang</model><year>1968</year></car>\r\n    <car><make>Mercedes</make><model>C-Class</model><year>1999</year></car>\r\n</cars>","options":["cars {\r\n  display: block;\r\n}\r\ncar(make),\r\ncar(model),\r\ncar(year) {\r\n  display: inline;\r\n  padding-top: 0.5em;\r\n}","car,\r\ncars {\r\n  display: block;\r\n}\r\nmake,\r\nmodel,\r\nyear {\r\n  display: inline;\r\n  padding-top: 0.5em;\r\n}","cars {\r\n  display: block;\r\n}\r\ncar.make,\r\ncar.model,\r\ncar.year {\r\n  display: inline;\r\n  padding-top: 0.5em;\r\n}","cars {\r\n  display: block;\r\n}\r\ncar#make,\r\ncar#model,\r\ncar#year {\r\n  display: inline;\r\n  padding-top: 0.5em;\r\n}"],"correctAns":2},{"query":"An XML document contains this code as part of the DTD: <!ELEMENT car (make, model?, year+, price*)>. What are the rules that need to be followed for each of the elements?","options":["<make> is required, <model> is optional, <year> is optional, and <price> is optional.","<make> is required, <model> is required, <year> is optional, and <price> is optional.","<make> is required, <model> is required, <year> is required, and <price> is optional.","<make> is required, <model> is optional, <year> is required, and <price> is optional."],"correctAns":4},{"query":"Which element in this XML code is not a good candidate for conversion into an attribute?","code":"1 <superheroes>\r\n2 <name>Superman</name>\r\n3 <alias>Clark Kent</alias>\r\n4 <birthplace>Krypton</birthplace>\r\n5 <power>Flight</power>\r\n6 <power>X-Ray Vision</power>\r\n7 <power>Super Strength</power>\r\n8 </superheroes>","options":["`<birthplace>`","`<alias>`","`<name>`","`<роwer>`"],"correctAns":4}]