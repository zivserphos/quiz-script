[{"query":"What is the correct way to write a public property with a private backing field?","code":null,"options":["private int _password;\r\npubic int Password = { get; set; }","private int _password;\r\npublic int Password = _password;","private int _password;\r\npublic int Password\r\n{\r\n  get -> _password;\r\n  set-> _password = value;\r\n}","private int _password;\r\npublic int Password\r\n{\r\n  get { return _password; }\r\n  set { _password = value; }\r\n}"],"correctAns":4},{"query":"What is a thread pool?","options":["a collection of synchronous methods created during initialization that cannot be reused","a collection of threads created during initialization that can be reused","a collection of threads only recognized at compile time that can be reused","a collection of asynchronous methods created at compile time that cannot be reused"],"correctAns":2},{"query":"What is the most accurate description of a regular expression?","options":["A regular expressions allows a variable to be passed by reference","A regular expression allows a class to conform to the Equatable protocol","A regular expression is a C# tool used to parse HTML","A regular expression is a special text string for describing a search pattern"],"correctAns":4},{"query":"When an object in C","options":["XML","JSON","byte stream","value stream"],"correctAns":3},{"query":"What is a delegate","options":["a variable that holds a reference to a value type and its content","a specific value type that can be used only in callback methods","a type that holds a reference to a method with a particular parameter list and return type","a custom variable type that can be used in abstract classes"],"correctAns":3},{"query":"What are the four keywords associated with exception handling in C","options":["try, catch, valid, invalid","try, valid, finally, throw","try, catch, finally, throw","finally, throw, valid, invalid"],"correctAns":3},{"query":"What is the main difference between the is and as operators?","options":["The is operator checks instance types, while the as operator checks the inherited type.","The is operator checks primitive data types, while the as operator checks the object type.","The as operator checks object type, while the is operator attempts to cast an object to a specific type.","The is operator checks object type, while the as operator attempts to cast an object to a specific type."],"correctAns":4},{"query":"What is the difference between finally and finalize blocks?","options":["The finally block is called during the execution of a try and catch block, while the finalize method is called after garbage collection.","The finally block is called after the execution of a try and catch block, while the finalize method is called just before garbage collection.","The finalize block is called before the execution of a try and catch block, while the finally method is called just before garbage collection.","The finalize block is called during the execution of a try and catch block, while the finally method is called after garbage collection."],"correctAns":2},{"query":"Your application has a value type called username that needs to be able to accept null values, but this is generating compile-time errors. How would you fix this in code?","options":["Null<string> username = null;","string? username = null;","Type<string>? username = null;","Optional<string> username = null;"],"correctAns":2},{"query":"Which code snippet correctly declares a custom exception named InvalidResponse?","options":["struct InvalidResponse: Exception {}","class InvalidResponse: Exception {}","public Exception InvalidResponse = new Exception ();","public Exception InvalidResponse () -> Exception;"],"correctAns":2},{"query":"How would you write an enum variable called AppState with values for Offline, Loading, and Ready?","options":["enum AppState = [Offline, Loading, Ready]","enum AppState {\"Offline\", \"Loading\", \"Ready\"}","enum AppState = {Offline, Loading, Ready}","enum AppState {Offline, Loading, Ready}"],"correctAns":4}]